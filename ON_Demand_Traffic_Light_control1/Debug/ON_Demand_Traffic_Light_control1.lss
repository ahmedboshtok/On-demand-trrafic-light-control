
ON_Demand_Traffic_Light_control1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002622  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  00002622  000026b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800184  00800184  000027da  2**0
                  ALLOC
  3 .stab         000029d0  00000000  00000000  000027dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011a4  00000000  00000000  000051ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000064f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000066e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b04c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b502  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000be70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__vector_1>
       8:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <__vector_2>
       c:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 39       	cpi	r26, 0x9D	; 157
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cf 12 	call	0x259e	; 0x259e <main>
      8a:	0c 94 0f 13 	jmp	0x261e	; 0x261e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 00 13 	jmp	0x2600	; 0x2600 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 00 13 	jmp	0x2600	; 0x2600 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 00 13 	jmp	0x2600	; 0x2600 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 00 13 	jmp	0x2600	; 0x2600 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 00 13 	jmp	0x2600	; 0x2600 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e8 12 	jmp	0x25d0	; 0x25d0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TIMER0_enuInit>:
static u8 TIMER0_uint32Preload;

static void (*TIMER0_ApfuncCalledFuncs[2])(void*) = {NULL, NULL};
static void* TIMER0_ApvoidParameters[2] = {NULL, NULL};

ES_t TIMER0_enuInit(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     e38:	19 82       	std	Y+1, r1	; 0x01

	TCCR0 &= ~(7 << 0);
     e3a:	a3 e5       	ldi	r26, 0x53	; 83
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e3 e5       	ldi	r30, 0x53	; 83
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	88 7f       	andi	r24, 0xF8	; 248
     e46:	8c 93       	st	X, r24
	TCCR0 |= (3 << 0);
     e48:	a3 e5       	ldi	r26, 0x53	; 83
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e3 e5       	ldi	r30, 0x53	; 83
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	83 60       	ori	r24, 0x03	; 3
     e54:	8c 93       	st	X, r24
	TCCR0 &= ~(3 << 4);
     e56:	a3 e5       	ldi	r26, 0x53	; 83
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e3 e5       	ldi	r30, 0x53	; 83
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	8f 7c       	andi	r24, 0xCF	; 207
     e62:	8c 93       	st	X, r24
	TCCR0 |= (0 << 4);
     e64:	a3 e5       	ldi	r26, 0x53	; 83
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e3 e5       	ldi	r30, 0x53	; 83
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	8c 93       	st	X, r24
	TIMSK &= ~(1 << TOIE0);
     e70:	a9 e5       	ldi	r26, 0x59	; 89
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e9 e5       	ldi	r30, 0x59	; 89
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	8e 7f       	andi	r24, 0xFE	; 254
     e7c:	8c 93       	st	X, r24
	TIMSK &= ~(1 << OCIE0);
     e7e:	a9 e5       	ldi	r26, 0x59	; 89
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e9 e5       	ldi	r30, 0x59	; 89
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	8d 7f       	andi	r24, 0xFD	; 253
     e8a:	8c 93       	st	X, r24

#if TIMER0_MODE == NORMAL_MODE
	TCCR0 &= ~(1 << WGM00);
     e8c:	a3 e5       	ldi	r26, 0x53	; 83
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e3 e5       	ldi	r30, 0x53	; 83
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	8f 7b       	andi	r24, 0xBF	; 191
     e98:	8c 93       	st	X, r24
	TCCR0 &= ~(1 << WGM01);
     e9a:	a3 e5       	ldi	r26, 0x53	; 83
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e3 e5       	ldi	r30, 0x53	; 83
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	87 7f       	andi	r24, 0xF7	; 247
     ea6:	8c 93       	st	X, r24

	Local_enuErrorState = ES_OK;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState = ES_OK;
#else
#error "Error!"
#endif

	return Local_enuErrorState;
     eac:	89 81       	ldd	r24, Y+1	; 0x01
}
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <TIMER0_enuSetSyncDelay>:


ES_t TIMER0_enuSetSyncDelay(u32 Copy_u32TimeMS){
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	a3 97       	sbiw	r28, 0x23	; 35
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
     ed2:	6e 8f       	std	Y+30, r22	; 0x1e
     ed4:	7f 8f       	std	Y+31, r23	; 0x1f
     ed6:	88 a3       	std	Y+32, r24	; 0x20
     ed8:	99 a3       	std	Y+33, r25	; 0x21
	ES_t  Local_enuErrorState= ES_NOK;
     eda:	1d 8e       	std	Y+29, r1	; 0x1d
	f32 Local_f32Tick_Time = (f32)PRESCALER64 / TIMER0_FREQ;
     edc:	8f e6       	ldi	r24, 0x6F	; 111
     ede:	92 e1       	ldi	r25, 0x12	; 18
     ee0:	a3 e8       	ldi	r26, 0x83	; 131
     ee2:	bb e3       	ldi	r27, 0x3B	; 59
     ee4:	89 8f       	std	Y+25, r24	; 0x19
     ee6:	9a 8f       	std	Y+26, r25	; 0x1a
     ee8:	ab 8f       	std	Y+27, r26	; 0x1b
     eea:	bc 8f       	std	Y+28, r27	; 0x1c
	f32 Local_f32TOV = COUNTS * Local_f32Tick_Time;
     eec:	69 8d       	ldd	r22, Y+25	; 0x19
     eee:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ef0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ef2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e8       	ldi	r20, 0x80	; 128
     efa:	53 e4       	ldi	r21, 0x43	; 67
     efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	8d 8b       	std	Y+21, r24	; 0x15
     f06:	9e 8b       	std	Y+22, r25	; 0x16
     f08:	af 8b       	std	Y+23, r26	; 0x17
     f0a:	b8 8f       	std	Y+24, r27	; 0x18
	f32 Local_f32NumOVF = Copy_u32TimeMS /Local_f32TOV;
     f0c:	6e 8d       	ldd	r22, Y+30	; 0x1e
     f0e:	7f 8d       	ldd	r23, Y+31	; 0x1f
     f10:	88 a1       	ldd	r24, Y+32	; 0x20
     f12:	99 a1       	ldd	r25, Y+33	; 0x21
     f14:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	bc 01       	movw	r22, r24
     f1e:	cd 01       	movw	r24, r26
     f20:	2d 89       	ldd	r18, Y+21	; 0x15
     f22:	3e 89       	ldd	r19, Y+22	; 0x16
     f24:	4f 89       	ldd	r20, Y+23	; 0x17
     f26:	58 8d       	ldd	r21, Y+24	; 0x18
     f28:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	89 8b       	std	Y+17, r24	; 0x11
     f32:	9a 8b       	std	Y+18, r25	; 0x12
     f34:	ab 8b       	std	Y+19, r26	; 0x13
     f36:	bc 8b       	std	Y+20, r27	; 0x14
	u32 Local_u32_NumOVF = (u32)Local_f32NumOVF +1;
     f38:	69 89       	ldd	r22, Y+17	; 0x11
     f3a:	7a 89       	ldd	r23, Y+18	; 0x12
     f3c:	8b 89       	ldd	r24, Y+19	; 0x13
     f3e:	9c 89       	ldd	r25, Y+20	; 0x14
     f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	a1 1d       	adc	r26, r1
     f4c:	b1 1d       	adc	r27, r1
     f4e:	8d 87       	std	Y+13, r24	; 0x0d
     f50:	9e 87       	std	Y+14, r25	; 0x0e
     f52:	af 87       	std	Y+15, r26	; 0x0f
     f54:	b8 8b       	std	Y+16, r27	; 0x10
	f32 Local_f32Fraction = Local_f32NumOVF - (u32)Local_f32NumOVF;
     f56:	69 89       	ldd	r22, Y+17	; 0x11
     f58:	7a 89       	ldd	r23, Y+18	; 0x12
     f5a:	8b 89       	ldd	r24, Y+19	; 0x13
     f5c:	9c 89       	ldd	r25, Y+20	; 0x14
     f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	bc 01       	movw	r22, r24
     f68:	cd 01       	movw	r24, r26
     f6a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f6e:	9b 01       	movw	r18, r22
     f70:	ac 01       	movw	r20, r24
     f72:	69 89       	ldd	r22, Y+17	; 0x11
     f74:	7a 89       	ldd	r23, Y+18	; 0x12
     f76:	8b 89       	ldd	r24, Y+19	; 0x13
     f78:	9c 89       	ldd	r25, Y+20	; 0x14
     f7a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	89 87       	std	Y+9, r24	; 0x09
     f84:	9a 87       	std	Y+10, r25	; 0x0a
     f86:	ab 87       	std	Y+11, r26	; 0x0b
     f88:	bc 87       	std	Y+12, r27	; 0x0c


	if(Local_f32Fraction != 0.0){
     f8a:	69 85       	ldd	r22, Y+9	; 0x09
     f8c:	7a 85       	ldd	r23, Y+10	; 0x0a
     f8e:	8b 85       	ldd	r24, Y+11	; 0x0b
     f90:	9c 85       	ldd	r25, Y+12	; 0x0c
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e0       	ldi	r20, 0x00	; 0
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
     f9e:	88 23       	and	r24, r24
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <TIMER0_enuSetSyncDelay+0xee>
     fa2:	9b c0       	rjmp	.+310    	; 0x10da <TIMER0_enuSetSyncDelay+0x224>
		u32 Local_Count_of_fraction = COUNTS *Local_f32Fraction;
     fa4:	69 85       	ldd	r22, Y+9	; 0x09
     fa6:	7a 85       	ldd	r23, Y+10	; 0x0a
     fa8:	8b 85       	ldd	r24, Y+11	; 0x0b
     faa:	9c 85       	ldd	r25, Y+12	; 0x0c
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	40 e8       	ldi	r20, 0x80	; 128
     fb2:	53 e4       	ldi	r21, 0x43	; 67
     fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	bc 01       	movw	r22, r24
     fbe:	cd 01       	movw	r24, r26
     fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	8d 83       	std	Y+5, r24	; 0x05
     fca:	9e 83       	std	Y+6, r25	; 0x06
     fcc:	af 83       	std	Y+7, r26	; 0x07
     fce:	b8 87       	std	Y+8, r27	; 0x08
		f32 Local_f32Preload = COUNTS - Local_Count_of_fraction ;
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	31 e0       	ldi	r19, 0x01	; 1
     fd4:	40 e0       	ldi	r20, 0x00	; 0
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	9e 81       	ldd	r25, Y+6	; 0x06
     fdc:	af 81       	ldd	r26, Y+7	; 0x07
     fde:	b8 85       	ldd	r27, Y+8	; 0x08
     fe0:	79 01       	movw	r14, r18
     fe2:	8a 01       	movw	r16, r20
     fe4:	e8 1a       	sub	r14, r24
     fe6:	f9 0a       	sbc	r15, r25
     fe8:	0a 0b       	sbc	r16, r26
     fea:	1b 0b       	sbc	r17, r27
     fec:	d8 01       	movw	r26, r16
     fee:	c7 01       	movw	r24, r14
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	9a 83       	std	Y+2, r25	; 0x02
    1000:	ab 83       	std	Y+3, r26	; 0x03
    1002:	bc 83       	std	Y+4, r27	; 0x04
		if((Local_f32Preload - (u32)Local_f32Preload) >= 0.5 && (Local_f32Preload - (u32)Local_f32Preload) < 1){
    1004:	69 81       	ldd	r22, Y+1	; 0x01
    1006:	7a 81       	ldd	r23, Y+2	; 0x02
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	9c 81       	ldd	r25, Y+4	; 0x04
    100c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	bc 01       	movw	r22, r24
    1016:	cd 01       	movw	r24, r26
    1018:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    101c:	9b 01       	movw	r18, r22
    101e:	ac 01       	movw	r20, r24
    1020:	69 81       	ldd	r22, Y+1	; 0x01
    1022:	7a 81       	ldd	r23, Y+2	; 0x02
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	9c 81       	ldd	r25, Y+4	; 0x04
    1028:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	1b a2       	std	Y+35, r1	; 0x23
    1032:	bc 01       	movw	r22, r24
    1034:	cd 01       	movw	r24, r26
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	5f e3       	ldi	r21, 0x3F	; 63
    103e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    1042:	88 23       	and	r24, r24
    1044:	14 f0       	brlt	.+4      	; 0x104a <TIMER0_enuSetSyncDelay+0x194>
    1046:	01 e0       	ldi	r16, 0x01	; 1
    1048:	0b a3       	std	Y+35, r16	; 0x23
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	1b a1       	ldd	r17, Y+35	; 0x23
    104e:	81 27       	eor	r24, r17
    1050:	88 23       	and	r24, r24
    1052:	b1 f5       	brne	.+108    	; 0x10c0 <TIMER0_enuSetSyncDelay+0x20a>
    1054:	69 81       	ldd	r22, Y+1	; 0x01
    1056:	7a 81       	ldd	r23, Y+2	; 0x02
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	9c 81       	ldd	r25, Y+4	; 0x04
    105c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	bc 01       	movw	r22, r24
    1066:	cd 01       	movw	r24, r26
    1068:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    106c:	9b 01       	movw	r18, r22
    106e:	ac 01       	movw	r20, r24
    1070:	69 81       	ldd	r22, Y+1	; 0x01
    1072:	7a 81       	ldd	r23, Y+2	; 0x02
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	9c 81       	ldd	r25, Y+4	; 0x04
    1078:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	1a a2       	std	Y+34, r1	; 0x22
    1082:	bc 01       	movw	r22, r24
    1084:	cd 01       	movw	r24, r26
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e8       	ldi	r20, 0x80	; 128
    108c:	5f e3       	ldi	r21, 0x3F	; 63
    108e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1092:	88 23       	and	r24, r24
    1094:	14 f4       	brge	.+4      	; 0x109a <TIMER0_enuSetSyncDelay+0x1e4>
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	8a a3       	std	Y+34, r24	; 0x22
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	9a a1       	ldd	r25, Y+34	; 0x22
    109e:	89 27       	eor	r24, r25
    10a0:	88 23       	and	r24, r24
    10a2:	71 f4       	brne	.+28     	; 0x10c0 <TIMER0_enuSetSyncDelay+0x20a>
			TCNT0 = (u8)Local_f32Preload + 1;
    10a4:	02 e5       	ldi	r16, 0x52	; 82
    10a6:	10 e0       	ldi	r17, 0x00	; 0
    10a8:	69 81       	ldd	r22, Y+1	; 0x01
    10aa:	7a 81       	ldd	r23, Y+2	; 0x02
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	9c 81       	ldd	r25, Y+4	; 0x04
    10b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	8f 5f       	subi	r24, 0xFF	; 255
    10ba:	f8 01       	movw	r30, r16
    10bc:	80 83       	st	Z, r24
    10be:	3c c0       	rjmp	.+120    	; 0x1138 <TIMER0_enuSetSyncDelay+0x282>
		}
		else{
			TCNT0 = (u8)Local_f32Preload;
    10c0:	02 e5       	ldi	r16, 0x52	; 82
    10c2:	10 e0       	ldi	r17, 0x00	; 0
    10c4:	69 81       	ldd	r22, Y+1	; 0x01
    10c6:	7a 81       	ldd	r23, Y+2	; 0x02
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	9c 81       	ldd	r25, Y+4	; 0x04
    10cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	f8 01       	movw	r30, r16
    10d6:	80 83       	st	Z, r24
    10d8:	2f c0       	rjmp	.+94     	; 0x1138 <TIMER0_enuSetSyncDelay+0x282>
		}
	}
	else{
		TIMER0_uint32NumOVF = (u32)Local_f32NumOVF;
    10da:	69 89       	ldd	r22, Y+17	; 0x11
    10dc:	7a 89       	ldd	r23, Y+18	; 0x12
    10de:	8b 89       	ldd	r24, Y+19	; 0x13
    10e0:	9c 89       	ldd	r25, Y+20	; 0x14
    10e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	80 93 90 01 	sts	0x0190, r24
    10ee:	90 93 91 01 	sts	0x0191, r25
    10f2:	a0 93 92 01 	sts	0x0192, r26
    10f6:	b0 93 93 01 	sts	0x0193, r27
			TCNT0 = 0;
    10fa:	e2 e5       	ldi	r30, 0x52	; 82
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	10 82       	st	Z, r1
    1100:	1b c0       	rjmp	.+54     	; 0x1138 <TIMER0_enuSetSyncDelay+0x282>
		}

		while(Local_u32_NumOVF){
			while(!((TIFR >> TOV0) & 1));
    1102:	e8 e5       	ldi	r30, 0x58	; 88
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	81 70       	andi	r24, 0x01	; 1
    110e:	90 70       	andi	r25, 0x00	; 0
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	b9 f3       	breq	.-18     	; 0x1102 <TIMER0_enuSetSyncDelay+0x24c>
			TIFR |= (1 << TOV0);
    1114:	a8 e5       	ldi	r26, 0x58	; 88
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e8 e5       	ldi	r30, 0x58	; 88
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	81 60       	ori	r24, 0x01	; 1
    1120:	8c 93       	st	X, r24
			Local_u32_NumOVF--;
    1122:	8d 85       	ldd	r24, Y+13	; 0x0d
    1124:	9e 85       	ldd	r25, Y+14	; 0x0e
    1126:	af 85       	ldd	r26, Y+15	; 0x0f
    1128:	b8 89       	ldd	r27, Y+16	; 0x10
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	a1 09       	sbc	r26, r1
    112e:	b1 09       	sbc	r27, r1
    1130:	8d 87       	std	Y+13, r24	; 0x0d
    1132:	9e 87       	std	Y+14, r25	; 0x0e
    1134:	af 87       	std	Y+15, r26	; 0x0f
    1136:	b8 8b       	std	Y+16, r27	; 0x10
	else{
		TIMER0_uint32NumOVF = (u32)Local_f32NumOVF;
			TCNT0 = 0;
		}

		while(Local_u32_NumOVF){
    1138:	8d 85       	ldd	r24, Y+13	; 0x0d
    113a:	9e 85       	ldd	r25, Y+14	; 0x0e
    113c:	af 85       	ldd	r26, Y+15	; 0x0f
    113e:	b8 89       	ldd	r27, Y+16	; 0x10
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	a1 05       	cpc	r26, r1
    1144:	b1 05       	cpc	r27, r1
    1146:	e9 f6       	brne	.-70     	; 0x1102 <TIMER0_enuSetSyncDelay+0x24c>
			while(!((TIFR >> TOV0) & 1));
			TIFR |= (1 << TOV0);
			Local_u32_NumOVF--;
		}
		return Local_enuErrorState = ES_OK;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	8d 8f       	std	Y+29, r24	; 0x1d
    114c:	8d 8d       	ldd	r24, Y+29	; 0x1d
	}
    114e:	a3 96       	adiw	r28, 0x23	; 35
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	ff 90       	pop	r15
    1164:	ef 90       	pop	r14
    1166:	08 95       	ret

00001168 <TIMER0_enuEnableOVFInterrupt>:

ES_t TIMER0_enuEnableOVFInterrupt(void){
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	0f 92       	push	r0
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    1172:	19 82       	std	Y+1, r1	; 0x01
	TIMSK |= (1 << TOIE0);
    1174:	a9 e5       	ldi	r26, 0x59	; 89
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e9 e5       	ldi	r30, 0x59	; 89
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	81 60       	ori	r24, 0x01	; 1
    1180:	8c 93       	st	X, r24
	Local_enuErrorStates = ES_OK;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStates;
    1186:	89 81       	ldd	r24, Y+1	; 0x01
}
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <TIMER0_enuDisableOVFInterrupt>:

ES_t TIMER0_enuDisableOVFInterrupt(void){
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	0f 92       	push	r0
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    119a:	19 82       	std	Y+1, r1	; 0x01
	TIMSK &= ~(1 << TOIE0);
    119c:	a9 e5       	ldi	r26, 0x59	; 89
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e9 e5       	ldi	r30, 0x59	; 89
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	8e 7f       	andi	r24, 0xFE	; 254
    11a8:	8c 93       	st	X, r24
	Local_enuErrorStates = ES_OK;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStates ;
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <__vector_11>:


ISR(TIMER0_OVF_VECT){
    11b8:	1f 92       	push	r1
    11ba:	0f 92       	push	r0
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	0f 92       	push	r0
    11c0:	11 24       	eor	r1, r1
    11c2:	2f 93       	push	r18
    11c4:	3f 93       	push	r19
    11c6:	4f 93       	push	r20
    11c8:	5f 93       	push	r21
    11ca:	6f 93       	push	r22
    11cc:	7f 93       	push	r23
    11ce:	8f 93       	push	r24
    11d0:	9f 93       	push	r25
    11d2:	af 93       	push	r26
    11d4:	bf 93       	push	r27
    11d6:	ef 93       	push	r30
    11d8:	ff 93       	push	r31
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62

	static u32 counts = 0;
	if(TIMER0_ApfuncCalledFuncs[TIMER0_INT_OVF] != NULL){
    11e2:	80 91 84 01 	lds	r24, 0x0184
    11e6:	90 91 85 01 	lds	r25, 0x0185
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <__vector_11+0x38>
    11ee:	3e c0       	rjmp	.+124    	; 0x126c <__vector_11+0xb4>
		counts++;
    11f0:	80 91 8c 01 	lds	r24, 0x018C
    11f4:	90 91 8d 01 	lds	r25, 0x018D
    11f8:	a0 91 8e 01 	lds	r26, 0x018E
    11fc:	b0 91 8f 01 	lds	r27, 0x018F
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	a1 1d       	adc	r26, r1
    1204:	b1 1d       	adc	r27, r1
    1206:	80 93 8c 01 	sts	0x018C, r24
    120a:	90 93 8d 01 	sts	0x018D, r25
    120e:	a0 93 8e 01 	sts	0x018E, r26
    1212:	b0 93 8f 01 	sts	0x018F, r27
		if(counts == TIMER0_uint32NumOVF){
    1216:	20 91 8c 01 	lds	r18, 0x018C
    121a:	30 91 8d 01 	lds	r19, 0x018D
    121e:	40 91 8e 01 	lds	r20, 0x018E
    1222:	50 91 8f 01 	lds	r21, 0x018F
    1226:	80 91 90 01 	lds	r24, 0x0190
    122a:	90 91 91 01 	lds	r25, 0x0191
    122e:	a0 91 92 01 	lds	r26, 0x0192
    1232:	b0 91 93 01 	lds	r27, 0x0193
    1236:	28 17       	cp	r18, r24
    1238:	39 07       	cpc	r19, r25
    123a:	4a 07       	cpc	r20, r26
    123c:	5b 07       	cpc	r21, r27
    123e:	b1 f4       	brne	.+44     	; 0x126c <__vector_11+0xb4>
			counts = 0;
    1240:	10 92 8c 01 	sts	0x018C, r1
    1244:	10 92 8d 01 	sts	0x018D, r1
    1248:	10 92 8e 01 	sts	0x018E, r1
    124c:	10 92 8f 01 	sts	0x018F, r1
			TCNT0 = TIMER0_uint32Preload;
    1250:	e2 e5       	ldi	r30, 0x52	; 82
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 91 94 01 	lds	r24, 0x0194
    1258:	80 83       	st	Z, r24
			TIMER0_ApfuncCalledFuncs[TIMER0_INT_OVF](TIMER0_ApvoidParameters[TIMER0_INT_OVF]);
    125a:	e0 91 84 01 	lds	r30, 0x0184
    125e:	f0 91 85 01 	lds	r31, 0x0185
    1262:	80 91 88 01 	lds	r24, 0x0188
    1266:	90 91 89 01 	lds	r25, 0x0189
    126a:	09 95       	icall
		}
	}
}
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	0f 90       	pop	r0
    128e:	1f 90       	pop	r1
    1290:	18 95       	reti

00001292 <GIE_enuInit>:
#include "../../LIBRARIES/errorStates.h"

#include "GIE_priv.h"

ES_t GIE_enuInit(void)
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	0f 92       	push	r0
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    129c:	19 82       	std	Y+1, r1	; 0x01

	SREG &=~(1<<7);
    129e:	af e5       	ldi	r26, 0x5F	; 95
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	ef e5       	ldi	r30, 0x5F	; 95
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	8f 77       	andi	r24, 0x7F	; 127
    12aa:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12b2:	0f 90       	pop	r0
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <GIE_enuEnable>:

ES_t GIE_enuEnable(void)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	0f 92       	push	r0
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    12c4:	19 82       	std	Y+1, r1	; 0x01

	SREG |= (1<<7);
    12c6:	af e5       	ldi	r26, 0x5F	; 95
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	ef e5       	ldi	r30, 0x5F	; 95
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	80 68       	ori	r24, 0x80	; 128
    12d2:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12da:	0f 90       	pop	r0
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <GIE_enuDisable>:

ES_t GIE_enuDisable(void)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	0f 92       	push	r0
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    12ec:	19 82       	std	Y+1, r1	; 0x01

	SREG &=~(1<<7);
    12ee:	af e5       	ldi	r26, 0x5F	; 95
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	ef e5       	ldi	r30, 0x5F	; 95
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	8f 77       	andi	r24, 0x7F	; 127
    12fa:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1300:	89 81       	ldd	r24, Y+1	; 0x01
}
    1302:	0f 90       	pop	r0
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <EXTI_enuInit>:
extern EXTI_t EXTI_AstrEXTIConfig[INT_NUM];



ES_t EXTI_enuInit()
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	27 97       	sbiw	r28, 0x07	; 7
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    131e:	19 82       	std	Y+1, r1	; 0x01
		{
			GICR &=~(1<<6);
		}
	}*/

	if (EXTI_AstrEXTIConfig[INT0].Int_State == ENABLED)
    1320:	80 91 68 01 	lds	r24, 0x0168
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	09 f0       	breq	.+2      	; 0x132a <EXTI_enuInit+0x20>
    1328:	58 c0       	rjmp	.+176    	; 0x13da <EXTI_enuInit+0xd0>
	{

		GICR |= (1<<6);
    132a:	ab e5       	ldi	r26, 0x5B	; 91
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	eb e5       	ldi	r30, 0x5B	; 91
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	80 64       	ori	r24, 0x40	; 64
    1336:	8c 93       	st	X, r24
		switch(EXTI_AstrEXTIConfig[INT0].Sence_level)
    1338:	80 91 69 01 	lds	r24, 0x0169
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	3f 83       	std	Y+7, r19	; 0x07
    1342:	2e 83       	std	Y+6, r18	; 0x06
    1344:	8e 81       	ldd	r24, Y+6	; 0x06
    1346:	9f 81       	ldd	r25, Y+7	; 0x07
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	91 05       	cpc	r25, r1
    134c:	e9 f0       	breq	.+58     	; 0x1388 <EXTI_enuInit+0x7e>
    134e:	2e 81       	ldd	r18, Y+6	; 0x06
    1350:	3f 81       	ldd	r19, Y+7	; 0x07
    1352:	22 30       	cpi	r18, 0x02	; 2
    1354:	31 05       	cpc	r19, r1
    1356:	2c f4       	brge	.+10     	; 0x1362 <EXTI_enuInit+0x58>
    1358:	8e 81       	ldd	r24, Y+6	; 0x06
    135a:	9f 81       	ldd	r25, Y+7	; 0x07
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	61 f0       	breq	.+24     	; 0x1378 <EXTI_enuInit+0x6e>
    1360:	39 c0       	rjmp	.+114    	; 0x13d4 <EXTI_enuInit+0xca>
    1362:	2e 81       	ldd	r18, Y+6	; 0x06
    1364:	3f 81       	ldd	r19, Y+7	; 0x07
    1366:	22 30       	cpi	r18, 0x02	; 2
    1368:	31 05       	cpc	r19, r1
    136a:	e9 f0       	breq	.+58     	; 0x13a6 <EXTI_enuInit+0x9c>
    136c:	8e 81       	ldd	r24, Y+6	; 0x06
    136e:	9f 81       	ldd	r25, Y+7	; 0x07
    1370:	83 30       	cpi	r24, 0x03	; 3
    1372:	91 05       	cpc	r25, r1
    1374:	39 f1       	breq	.+78     	; 0x13c4 <EXTI_enuInit+0xba>
    1376:	2e c0       	rjmp	.+92     	; 0x13d4 <EXTI_enuInit+0xca>
		{
		case LOW_LEVEL:
			MCUCR &= ~(3<<0);
    1378:	a5 e5       	ldi	r26, 0x55	; 85
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e5 e5       	ldi	r30, 0x55	; 85
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	8c 7f       	andi	r24, 0xFC	; 252
    1384:	8c 93       	st	X, r24
    1386:	34 c0       	rjmp	.+104    	; 0x13f0 <EXTI_enuInit+0xe6>
			break;
		case ANY_LOGICAL:
			MCUCR |=  (1<<0);
    1388:	a5 e5       	ldi	r26, 0x55	; 85
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e5 e5       	ldi	r30, 0x55	; 85
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	81 60       	ori	r24, 0x01	; 1
    1394:	8c 93       	st	X, r24
			MCUCR &= ~(1<<1);
    1396:	a5 e5       	ldi	r26, 0x55	; 85
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e5 e5       	ldi	r30, 0x55	; 85
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	8d 7f       	andi	r24, 0xFD	; 253
    13a2:	8c 93       	st	X, r24
    13a4:	25 c0       	rjmp	.+74     	; 0x13f0 <EXTI_enuInit+0xe6>
			break;
		case FALLING:
			MCUCR &= ~(1<<0);
    13a6:	a5 e5       	ldi	r26, 0x55	; 85
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e5 e5       	ldi	r30, 0x55	; 85
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	8e 7f       	andi	r24, 0xFE	; 254
    13b2:	8c 93       	st	X, r24
			MCUCR |=  (1<<1);
    13b4:	a5 e5       	ldi	r26, 0x55	; 85
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e5 e5       	ldi	r30, 0x55	; 85
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	82 60       	ori	r24, 0x02	; 2
    13c0:	8c 93       	st	X, r24
    13c2:	16 c0       	rjmp	.+44     	; 0x13f0 <EXTI_enuInit+0xe6>
			break;
		case RISING:
			MCUCR |=  (3<<0);
    13c4:	a5 e5       	ldi	r26, 0x55	; 85
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e5 e5       	ldi	r30, 0x55	; 85
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	83 60       	ori	r24, 0x03	; 3
    13d0:	8c 93       	st	X, r24
    13d2:	0e c0       	rjmp	.+28     	; 0x13f0 <EXTI_enuInit+0xe6>
			break;
		default:
			Local_enuErrorState = ES_OUT_OF_RANGE;
    13d4:	83 e0       	ldi	r24, 0x03	; 3
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	0b c0       	rjmp	.+22     	; 0x13f0 <EXTI_enuInit+0xe6>
		}
	}
	else if (EXTI_AstrEXTIConfig[INT0].Int_State == DISABLED)
    13da:	80 91 68 01 	lds	r24, 0x0168
    13de:	88 23       	and	r24, r24
    13e0:	39 f4       	brne	.+14     	; 0x13f0 <EXTI_enuInit+0xe6>
	{
		GICR &=~(1<<6);
    13e2:	ab e5       	ldi	r26, 0x5B	; 91
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	eb e5       	ldi	r30, 0x5B	; 91
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	8f 7b       	andi	r24, 0xBF	; 191
    13ee:	8c 93       	st	X, r24
	}

	if (EXTI_AstrEXTIConfig[INT1].Int_State == ENABLED)
    13f0:	80 91 6a 01 	lds	r24, 0x016A
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	09 f0       	breq	.+2      	; 0x13fa <EXTI_enuInit+0xf0>
    13f8:	58 c0       	rjmp	.+176    	; 0x14aa <EXTI_enuInit+0x1a0>
	{
		GICR |= (1<<7);
    13fa:	ab e5       	ldi	r26, 0x5B	; 91
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	eb e5       	ldi	r30, 0x5B	; 91
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 68       	ori	r24, 0x80	; 128
    1406:	8c 93       	st	X, r24
		switch(EXTI_AstrEXTIConfig[INT1].Sence_level)
    1408:	80 91 6b 01 	lds	r24, 0x016B
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	3d 83       	std	Y+5, r19	; 0x05
    1412:	2c 83       	std	Y+4, r18	; 0x04
    1414:	8c 81       	ldd	r24, Y+4	; 0x04
    1416:	9d 81       	ldd	r25, Y+5	; 0x05
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	91 05       	cpc	r25, r1
    141c:	e9 f0       	breq	.+58     	; 0x1458 <EXTI_enuInit+0x14e>
    141e:	2c 81       	ldd	r18, Y+4	; 0x04
    1420:	3d 81       	ldd	r19, Y+5	; 0x05
    1422:	22 30       	cpi	r18, 0x02	; 2
    1424:	31 05       	cpc	r19, r1
    1426:	2c f4       	brge	.+10     	; 0x1432 <EXTI_enuInit+0x128>
    1428:	8c 81       	ldd	r24, Y+4	; 0x04
    142a:	9d 81       	ldd	r25, Y+5	; 0x05
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	61 f0       	breq	.+24     	; 0x1448 <EXTI_enuInit+0x13e>
    1430:	39 c0       	rjmp	.+114    	; 0x14a4 <EXTI_enuInit+0x19a>
    1432:	2c 81       	ldd	r18, Y+4	; 0x04
    1434:	3d 81       	ldd	r19, Y+5	; 0x05
    1436:	22 30       	cpi	r18, 0x02	; 2
    1438:	31 05       	cpc	r19, r1
    143a:	e9 f0       	breq	.+58     	; 0x1476 <EXTI_enuInit+0x16c>
    143c:	8c 81       	ldd	r24, Y+4	; 0x04
    143e:	9d 81       	ldd	r25, Y+5	; 0x05
    1440:	83 30       	cpi	r24, 0x03	; 3
    1442:	91 05       	cpc	r25, r1
    1444:	39 f1       	breq	.+78     	; 0x1494 <EXTI_enuInit+0x18a>
    1446:	2e c0       	rjmp	.+92     	; 0x14a4 <EXTI_enuInit+0x19a>
		{
		case LOW_LEVEL:
			MCUCR &= ~(3<<2);
    1448:	a5 e5       	ldi	r26, 0x55	; 85
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e5 e5       	ldi	r30, 0x55	; 85
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	83 7f       	andi	r24, 0xF3	; 243
    1454:	8c 93       	st	X, r24
    1456:	34 c0       	rjmp	.+104    	; 0x14c0 <EXTI_enuInit+0x1b6>
			break;
		case ANY_LOGICAL:
			MCUCR |=  (1<<2);
    1458:	a5 e5       	ldi	r26, 0x55	; 85
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e5 e5       	ldi	r30, 0x55	; 85
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	84 60       	ori	r24, 0x04	; 4
    1464:	8c 93       	st	X, r24
			MCUCR &= ~(1<<3);
    1466:	a5 e5       	ldi	r26, 0x55	; 85
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e5 e5       	ldi	r30, 0x55	; 85
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	87 7f       	andi	r24, 0xF7	; 247
    1472:	8c 93       	st	X, r24
    1474:	25 c0       	rjmp	.+74     	; 0x14c0 <EXTI_enuInit+0x1b6>
			break;
		case FALLING:
			MCUCR &= ~(1<<2);
    1476:	a5 e5       	ldi	r26, 0x55	; 85
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e5 e5       	ldi	r30, 0x55	; 85
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	8b 7f       	andi	r24, 0xFB	; 251
    1482:	8c 93       	st	X, r24
			MCUCR |=  (1<<3);
    1484:	a5 e5       	ldi	r26, 0x55	; 85
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e5 e5       	ldi	r30, 0x55	; 85
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	88 60       	ori	r24, 0x08	; 8
    1490:	8c 93       	st	X, r24
    1492:	16 c0       	rjmp	.+44     	; 0x14c0 <EXTI_enuInit+0x1b6>
			break;
		case RISING:
			MCUCR |=  (3<<2);
    1494:	a5 e5       	ldi	r26, 0x55	; 85
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e5 e5       	ldi	r30, 0x55	; 85
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	8c 60       	ori	r24, 0x0C	; 12
    14a0:	8c 93       	st	X, r24
    14a2:	0e c0       	rjmp	.+28     	; 0x14c0 <EXTI_enuInit+0x1b6>
			break;
		default:
			Local_enuErrorState = ES_OUT_OF_RANGE;
    14a4:	83 e0       	ldi	r24, 0x03	; 3
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	0b c0       	rjmp	.+22     	; 0x14c0 <EXTI_enuInit+0x1b6>
		}
	}
	else if (EXTI_AstrEXTIConfig[INT1].Int_State == DISABLED)
    14aa:	80 91 6a 01 	lds	r24, 0x016A
    14ae:	88 23       	and	r24, r24
    14b0:	39 f4       	brne	.+14     	; 0x14c0 <EXTI_enuInit+0x1b6>
	{
		GICR &=~(1<<7);
    14b2:	ab e5       	ldi	r26, 0x5B	; 91
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	eb e5       	ldi	r30, 0x5B	; 91
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8f 77       	andi	r24, 0x7F	; 127
    14be:	8c 93       	st	X, r24
	}

	if (EXTI_AstrEXTIConfig[INT2].Int_State == ENABLED)
    14c0:	80 91 6c 01 	lds	r24, 0x016C
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	59 f5       	brne	.+86     	; 0x151e <EXTI_enuInit+0x214>
	{
		GICR |= (1<<5);
    14c8:	ab e5       	ldi	r26, 0x5B	; 91
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	eb e5       	ldi	r30, 0x5B	; 91
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	80 62       	ori	r24, 0x20	; 32
    14d4:	8c 93       	st	X, r24
		switch(EXTI_AstrEXTIConfig[INT2].Sence_level)
    14d6:	80 91 6d 01 	lds	r24, 0x016D
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	3b 83       	std	Y+3, r19	; 0x03
    14e0:	2a 83       	std	Y+2, r18	; 0x02
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	9b 81       	ldd	r25, Y+3	; 0x03
    14e6:	82 30       	cpi	r24, 0x02	; 2
    14e8:	91 05       	cpc	r25, r1
    14ea:	31 f0       	breq	.+12     	; 0x14f8 <EXTI_enuInit+0x1ee>
    14ec:	2a 81       	ldd	r18, Y+2	; 0x02
    14ee:	3b 81       	ldd	r19, Y+3	; 0x03
    14f0:	23 30       	cpi	r18, 0x03	; 3
    14f2:	31 05       	cpc	r19, r1
    14f4:	49 f0       	breq	.+18     	; 0x1508 <EXTI_enuInit+0x1fe>
    14f6:	10 c0       	rjmp	.+32     	; 0x1518 <EXTI_enuInit+0x20e>
		{
		case FALLING:
			MCUCSR &= ~(1<<6);
    14f8:	a4 e5       	ldi	r26, 0x54	; 84
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e4 e5       	ldi	r30, 0x54	; 84
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	8f 7b       	andi	r24, 0xBF	; 191
    1504:	8c 93       	st	X, r24
    1506:	16 c0       	rjmp	.+44     	; 0x1534 <EXTI_enuInit+0x22a>
			break;
		case RISING:
			MCUCSR |=  (1<<6);
    1508:	a4 e5       	ldi	r26, 0x54	; 84
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e4 e5       	ldi	r30, 0x54	; 84
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	80 64       	ori	r24, 0x40	; 64
    1514:	8c 93       	st	X, r24
    1516:	0e c0       	rjmp	.+28     	; 0x1534 <EXTI_enuInit+0x22a>
			break;
		default:
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1518:	83 e0       	ldi	r24, 0x03	; 3
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	0b c0       	rjmp	.+22     	; 0x1534 <EXTI_enuInit+0x22a>
		}
	}
	else if (EXTI_AstrEXTIConfig[INT2].Int_State == DISABLED)
    151e:	80 91 6c 01 	lds	r24, 0x016C
    1522:	88 23       	and	r24, r24
    1524:	39 f4       	brne	.+14     	; 0x1534 <EXTI_enuInit+0x22a>
	{
		GICR &=~(1<<5);
    1526:	ab e5       	ldi	r26, 0x5B	; 91
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	eb e5       	ldi	r30, 0x5B	; 91
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	8f 7d       	andi	r24, 0xDF	; 223
    1532:	8c 93       	st	X, r24
	}
	return Local_enuErrorState;
    1534:	89 81       	ldd	r24, Y+1	; 0x01
}
    1536:	27 96       	adiw	r28, 0x07	; 7
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <EXTI_enuSetSenseLevel>:

ES_t EXTI_enuSetSenseLevel(u8 Copy_u8IntNum, u8 Copy_u8SenceLevel)
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	29 97       	sbiw	r28, 0x09	; 9
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	8a 83       	std	Y+2, r24	; 0x02
    155e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1560:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8IntNum == INT0)
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	88 23       	and	r24, r24
    1566:	09 f0       	breq	.+2      	; 0x156a <EXTI_enuSetSenseLevel+0x22>
    1568:	50 c0       	rjmp	.+160    	; 0x160a <EXTI_enuSetSenseLevel+0xc2>
	{
		switch(Copy_u8SenceLevel)
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	39 87       	std	Y+9, r19	; 0x09
    1572:	28 87       	std	Y+8, r18	; 0x08
    1574:	88 85       	ldd	r24, Y+8	; 0x08
    1576:	99 85       	ldd	r25, Y+9	; 0x09
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	91 05       	cpc	r25, r1
    157c:	e9 f0       	breq	.+58     	; 0x15b8 <EXTI_enuSetSenseLevel+0x70>
    157e:	28 85       	ldd	r18, Y+8	; 0x08
    1580:	39 85       	ldd	r19, Y+9	; 0x09
    1582:	22 30       	cpi	r18, 0x02	; 2
    1584:	31 05       	cpc	r19, r1
    1586:	2c f4       	brge	.+10     	; 0x1592 <EXTI_enuSetSenseLevel+0x4a>
    1588:	88 85       	ldd	r24, Y+8	; 0x08
    158a:	99 85       	ldd	r25, Y+9	; 0x09
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	61 f0       	breq	.+24     	; 0x15a8 <EXTI_enuSetSenseLevel+0x60>
    1590:	39 c0       	rjmp	.+114    	; 0x1604 <EXTI_enuSetSenseLevel+0xbc>
    1592:	28 85       	ldd	r18, Y+8	; 0x08
    1594:	39 85       	ldd	r19, Y+9	; 0x09
    1596:	22 30       	cpi	r18, 0x02	; 2
    1598:	31 05       	cpc	r19, r1
    159a:	e9 f0       	breq	.+58     	; 0x15d6 <EXTI_enuSetSenseLevel+0x8e>
    159c:	88 85       	ldd	r24, Y+8	; 0x08
    159e:	99 85       	ldd	r25, Y+9	; 0x09
    15a0:	83 30       	cpi	r24, 0x03	; 3
    15a2:	91 05       	cpc	r25, r1
    15a4:	39 f1       	breq	.+78     	; 0x15f4 <EXTI_enuSetSenseLevel+0xac>
    15a6:	2e c0       	rjmp	.+92     	; 0x1604 <EXTI_enuSetSenseLevel+0xbc>
		{
		case LOW_LEVEL:
			MCUCR &= ~(3<<0);
    15a8:	a5 e5       	ldi	r26, 0x55	; 85
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e5 e5       	ldi	r30, 0x55	; 85
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	8c 7f       	andi	r24, 0xFC	; 252
    15b4:	8c 93       	st	X, r24
    15b6:	a2 c0       	rjmp	.+324    	; 0x16fc <EXTI_enuSetSenseLevel+0x1b4>
			break;
		case ANY_LOGICAL:
			MCUCR |=  (1<<0);
    15b8:	a5 e5       	ldi	r26, 0x55	; 85
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e5 e5       	ldi	r30, 0x55	; 85
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	81 60       	ori	r24, 0x01	; 1
    15c4:	8c 93       	st	X, r24
			MCUCR &= ~(1<<1);
    15c6:	a5 e5       	ldi	r26, 0x55	; 85
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e5 e5       	ldi	r30, 0x55	; 85
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	8d 7f       	andi	r24, 0xFD	; 253
    15d2:	8c 93       	st	X, r24
    15d4:	93 c0       	rjmp	.+294    	; 0x16fc <EXTI_enuSetSenseLevel+0x1b4>
			break;
		case FALLING:
			MCUCR &= ~(1<<0);
    15d6:	a5 e5       	ldi	r26, 0x55	; 85
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e5 e5       	ldi	r30, 0x55	; 85
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	8e 7f       	andi	r24, 0xFE	; 254
    15e2:	8c 93       	st	X, r24
			MCUCR |=  (1<<1);
    15e4:	a5 e5       	ldi	r26, 0x55	; 85
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e5 e5       	ldi	r30, 0x55	; 85
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	82 60       	ori	r24, 0x02	; 2
    15f0:	8c 93       	st	X, r24
    15f2:	84 c0       	rjmp	.+264    	; 0x16fc <EXTI_enuSetSenseLevel+0x1b4>
			break;
		case RISING:
			MCUCR |=  (3<<0);
    15f4:	a5 e5       	ldi	r26, 0x55	; 85
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e5 e5       	ldi	r30, 0x55	; 85
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	83 60       	ori	r24, 0x03	; 3
    1600:	8c 93       	st	X, r24
    1602:	7c c0       	rjmp	.+248    	; 0x16fc <EXTI_enuSetSenseLevel+0x1b4>
			break;
		default:
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1604:	83 e0       	ldi	r24, 0x03	; 3
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	79 c0       	rjmp	.+242    	; 0x16fc <EXTI_enuSetSenseLevel+0x1b4>
		}
	}
	else if (Copy_u8IntNum == INT1)
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	09 f0       	breq	.+2      	; 0x1612 <EXTI_enuSetSenseLevel+0xca>
    1610:	50 c0       	rjmp	.+160    	; 0x16b2 <EXTI_enuSetSenseLevel+0x16a>
	{
		switch(Copy_u8SenceLevel)
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	3f 83       	std	Y+7, r19	; 0x07
    161a:	2e 83       	std	Y+6, r18	; 0x06
    161c:	8e 81       	ldd	r24, Y+6	; 0x06
    161e:	9f 81       	ldd	r25, Y+7	; 0x07
    1620:	81 30       	cpi	r24, 0x01	; 1
    1622:	91 05       	cpc	r25, r1
    1624:	e9 f0       	breq	.+58     	; 0x1660 <EXTI_enuSetSenseLevel+0x118>
    1626:	2e 81       	ldd	r18, Y+6	; 0x06
    1628:	3f 81       	ldd	r19, Y+7	; 0x07
    162a:	22 30       	cpi	r18, 0x02	; 2
    162c:	31 05       	cpc	r19, r1
    162e:	2c f4       	brge	.+10     	; 0x163a <EXTI_enuSetSenseLevel+0xf2>
    1630:	8e 81       	ldd	r24, Y+6	; 0x06
    1632:	9f 81       	ldd	r25, Y+7	; 0x07
    1634:	00 97       	sbiw	r24, 0x00	; 0
    1636:	61 f0       	breq	.+24     	; 0x1650 <EXTI_enuSetSenseLevel+0x108>
    1638:	39 c0       	rjmp	.+114    	; 0x16ac <EXTI_enuSetSenseLevel+0x164>
    163a:	2e 81       	ldd	r18, Y+6	; 0x06
    163c:	3f 81       	ldd	r19, Y+7	; 0x07
    163e:	22 30       	cpi	r18, 0x02	; 2
    1640:	31 05       	cpc	r19, r1
    1642:	e9 f0       	breq	.+58     	; 0x167e <EXTI_enuSetSenseLevel+0x136>
    1644:	8e 81       	ldd	r24, Y+6	; 0x06
    1646:	9f 81       	ldd	r25, Y+7	; 0x07
    1648:	83 30       	cpi	r24, 0x03	; 3
    164a:	91 05       	cpc	r25, r1
    164c:	39 f1       	breq	.+78     	; 0x169c <EXTI_enuSetSenseLevel+0x154>
    164e:	2e c0       	rjmp	.+92     	; 0x16ac <EXTI_enuSetSenseLevel+0x164>
		{
		case LOW_LEVEL:
			MCUCR &= ~(3<<2);
    1650:	a5 e5       	ldi	r26, 0x55	; 85
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e5 e5       	ldi	r30, 0x55	; 85
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	83 7f       	andi	r24, 0xF3	; 243
    165c:	8c 93       	st	X, r24
    165e:	4e c0       	rjmp	.+156    	; 0x16fc <EXTI_enuSetSenseLevel+0x1b4>
			break;
		case ANY_LOGICAL:
			MCUCR |=  (1<<2);
    1660:	a5 e5       	ldi	r26, 0x55	; 85
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e5 e5       	ldi	r30, 0x55	; 85
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	84 60       	ori	r24, 0x04	; 4
    166c:	8c 93       	st	X, r24
			MCUCR &= ~(1<<3);
    166e:	a5 e5       	ldi	r26, 0x55	; 85
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e5 e5       	ldi	r30, 0x55	; 85
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	87 7f       	andi	r24, 0xF7	; 247
    167a:	8c 93       	st	X, r24
    167c:	3f c0       	rjmp	.+126    	; 0x16fc <EXTI_enuSetSenseLevel+0x1b4>
			break;
		case FALLING:
			MCUCR &= ~(1<<2);
    167e:	a5 e5       	ldi	r26, 0x55	; 85
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e5 e5       	ldi	r30, 0x55	; 85
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	8b 7f       	andi	r24, 0xFB	; 251
    168a:	8c 93       	st	X, r24
			MCUCR |=  (1<<3);
    168c:	a5 e5       	ldi	r26, 0x55	; 85
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e5 e5       	ldi	r30, 0x55	; 85
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	88 60       	ori	r24, 0x08	; 8
    1698:	8c 93       	st	X, r24
    169a:	30 c0       	rjmp	.+96     	; 0x16fc <EXTI_enuSetSenseLevel+0x1b4>
			break;
		case RISING:
			MCUCR |=  (3<<2);
    169c:	a5 e5       	ldi	r26, 0x55	; 85
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e5 e5       	ldi	r30, 0x55	; 85
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	8c 60       	ori	r24, 0x0C	; 12
    16a8:	8c 93       	st	X, r24
    16aa:	28 c0       	rjmp	.+80     	; 0x16fc <EXTI_enuSetSenseLevel+0x1b4>
			break;
		default:
			Local_enuErrorState = ES_OUT_OF_RANGE;
    16ac:	83 e0       	ldi	r24, 0x03	; 3
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	25 c0       	rjmp	.+74     	; 0x16fc <EXTI_enuSetSenseLevel+0x1b4>
		}
	}
	else if (Copy_u8IntNum == INT2)
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	82 30       	cpi	r24, 0x02	; 2
    16b6:	11 f5       	brne	.+68     	; 0x16fc <EXTI_enuSetSenseLevel+0x1b4>
	{
		switch(Copy_u8SenceLevel)
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	3d 83       	std	Y+5, r19	; 0x05
    16c0:	2c 83       	std	Y+4, r18	; 0x04
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
    16c4:	9d 81       	ldd	r25, Y+5	; 0x05
    16c6:	82 30       	cpi	r24, 0x02	; 2
    16c8:	91 05       	cpc	r25, r1
    16ca:	31 f0       	breq	.+12     	; 0x16d8 <EXTI_enuSetSenseLevel+0x190>
    16cc:	2c 81       	ldd	r18, Y+4	; 0x04
    16ce:	3d 81       	ldd	r19, Y+5	; 0x05
    16d0:	23 30       	cpi	r18, 0x03	; 3
    16d2:	31 05       	cpc	r19, r1
    16d4:	49 f0       	breq	.+18     	; 0x16e8 <EXTI_enuSetSenseLevel+0x1a0>
    16d6:	10 c0       	rjmp	.+32     	; 0x16f8 <EXTI_enuSetSenseLevel+0x1b0>
		{
		case FALLING:
			MCUCSR &= ~(1<<6);
    16d8:	a4 e5       	ldi	r26, 0x54	; 84
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e4 e5       	ldi	r30, 0x54	; 84
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8f 7b       	andi	r24, 0xBF	; 191
    16e4:	8c 93       	st	X, r24
    16e6:	0a c0       	rjmp	.+20     	; 0x16fc <EXTI_enuSetSenseLevel+0x1b4>
			break;
		case RISING:
			MCUCSR |=  (1<<6);
    16e8:	a4 e5       	ldi	r26, 0x54	; 84
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e4 e5       	ldi	r30, 0x54	; 84
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	80 64       	ori	r24, 0x40	; 64
    16f4:	8c 93       	st	X, r24
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <EXTI_enuSetSenseLevel+0x1b4>
			break;
		default:
			Local_enuErrorState = ES_OUT_OF_RANGE;
    16f8:	83 e0       	ldi	r24, 0x03	; 3
    16fa:	89 83       	std	Y+1, r24	; 0x01
		}
	}


	return Local_enuErrorState;
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    16fe:	29 96       	adiw	r28, 0x09	; 9
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <EXTI_enuEnableInterrupt>:

ES_t EXTI_enuEnableInterrupt(u8 Copy_u8IntNum)
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	00 d0       	rcall	.+0      	; 0x1716 <EXTI_enuEnableInterrupt+0x6>
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    171c:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8IntNum == INT0)
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	88 23       	and	r24, r24
    1722:	41 f4       	brne	.+16     	; 0x1734 <EXTI_enuEnableInterrupt+0x24>
	{
		GICR |= (1<<6);
    1724:	ab e5       	ldi	r26, 0x5B	; 91
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	eb e5       	ldi	r30, 0x5B	; 91
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	80 64       	ori	r24, 0x40	; 64
    1730:	8c 93       	st	X, r24
    1732:	18 c0       	rjmp	.+48     	; 0x1764 <EXTI_enuEnableInterrupt+0x54>
	}
	else if (Copy_u8IntNum == INT1)
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	41 f4       	brne	.+16     	; 0x174a <EXTI_enuEnableInterrupt+0x3a>
	{
		GICR |= (1<<7);
    173a:	ab e5       	ldi	r26, 0x5B	; 91
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	eb e5       	ldi	r30, 0x5B	; 91
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	80 68       	ori	r24, 0x80	; 128
    1746:	8c 93       	st	X, r24
    1748:	0d c0       	rjmp	.+26     	; 0x1764 <EXTI_enuEnableInterrupt+0x54>
	}
	else if (Copy_u8IntNum == INT2)
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	82 30       	cpi	r24, 0x02	; 2
    174e:	41 f4       	brne	.+16     	; 0x1760 <EXTI_enuEnableInterrupt+0x50>
	{
		GICR |= (1<<5);
    1750:	ab e5       	ldi	r26, 0x5B	; 91
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	eb e5       	ldi	r30, 0x5B	; 91
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	80 62       	ori	r24, 0x20	; 32
    175c:	8c 93       	st	X, r24
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <EXTI_enuEnableInterrupt+0x54>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1760:	83 e0       	ldi	r24, 0x03	; 3
    1762:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1764:	89 81       	ldd	r24, Y+1	; 0x01
}
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <EXTI_enuDisableInterrupt>:

ES_t EXTI_enuDisableInterrupt(u8 Copy_u8IntNum)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	00 d0       	rcall	.+0      	; 0x1776 <EXTI_enuDisableInterrupt+0x6>
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    177c:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8IntNum == INT0)
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	88 23       	and	r24, r24
    1782:	41 f4       	brne	.+16     	; 0x1794 <EXTI_enuDisableInterrupt+0x24>
	{
		GICR &=~(1<<6);
    1784:	ab e5       	ldi	r26, 0x5B	; 91
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	eb e5       	ldi	r30, 0x5B	; 91
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	8f 7b       	andi	r24, 0xBF	; 191
    1790:	8c 93       	st	X, r24
    1792:	18 c0       	rjmp	.+48     	; 0x17c4 <EXTI_enuDisableInterrupt+0x54>
	}
	else if (Copy_u8IntNum == INT1)
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	81 30       	cpi	r24, 0x01	; 1
    1798:	41 f4       	brne	.+16     	; 0x17aa <EXTI_enuDisableInterrupt+0x3a>
	{
		GICR &=~(1<<7);
    179a:	ab e5       	ldi	r26, 0x5B	; 91
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	eb e5       	ldi	r30, 0x5B	; 91
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	8f 77       	andi	r24, 0x7F	; 127
    17a6:	8c 93       	st	X, r24
    17a8:	0d c0       	rjmp	.+26     	; 0x17c4 <EXTI_enuDisableInterrupt+0x54>
	}
	else if (Copy_u8IntNum == INT2)
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	82 30       	cpi	r24, 0x02	; 2
    17ae:	41 f4       	brne	.+16     	; 0x17c0 <EXTI_enuDisableInterrupt+0x50>
	{
		GICR &=~(1<<5);
    17b0:	ab e5       	ldi	r26, 0x5B	; 91
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	eb e5       	ldi	r30, 0x5B	; 91
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	8f 7d       	andi	r24, 0xDF	; 223
    17bc:	8c 93       	st	X, r24
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <EXTI_enuDisableInterrupt+0x54>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    17c0:	83 e0       	ldi	r24, 0x03	; 3
    17c2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack(volatile void (* Copy_pfunAppFun)(void), u8 Copy_u8IntNum)
{
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <EXTI_enuCallBack+0x6>
    17d6:	00 d0       	rcall	.+0      	; 0x17d8 <EXTI_enuCallBack+0x8>
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	9b 83       	std	Y+3, r25	; 0x03
    17de:	8a 83       	std	Y+2, r24	; 0x02
    17e0:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    17e2:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pfunAppFun != NULL)
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	9b 81       	ldd	r25, Y+3	; 0x03
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	99 f0       	breq	.+38     	; 0x1812 <EXTI_enuCallBack+0x42>
	{
		if (Copy_u8IntNum <=2 )
    17ec:	8c 81       	ldd	r24, Y+4	; 0x04
    17ee:	83 30       	cpi	r24, 0x03	; 3
    17f0:	68 f4       	brcc	.+26     	; 0x180c <EXTI_enuCallBack+0x3c>
		{
				EXTI_pfunISRFun[Copy_u8IntNum] = Copy_pfunAppFun;
    17f2:	8c 81       	ldd	r24, Y+4	; 0x04
    17f4:	88 2f       	mov	r24, r24
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	fc 01       	movw	r30, r24
    17fe:	eb 56       	subi	r30, 0x6B	; 107
    1800:	fe 4f       	sbci	r31, 0xFE	; 254
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	9b 81       	ldd	r25, Y+3	; 0x03
    1806:	91 83       	std	Z+1, r25	; 0x01
    1808:	80 83       	st	Z, r24
    180a:	05 c0       	rjmp	.+10     	; 0x1816 <EXTI_enuCallBack+0x46>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	89 83       	std	Y+1, r24	; 0x01
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <EXTI_enuCallBack+0x46>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1812:	82 e0       	ldi	r24, 0x02	; 2
    1814:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1816:	89 81       	ldd	r24, Y+1	; 0x01
}
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <__vector_1>:

ISR(VECT_INT0){
    1826:	1f 92       	push	r1
    1828:	0f 92       	push	r0
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	0f 92       	push	r0
    182e:	11 24       	eor	r1, r1
    1830:	2f 93       	push	r18
    1832:	3f 93       	push	r19
    1834:	4f 93       	push	r20
    1836:	5f 93       	push	r21
    1838:	6f 93       	push	r22
    183a:	7f 93       	push	r23
    183c:	8f 93       	push	r24
    183e:	9f 93       	push	r25
    1840:	af 93       	push	r26
    1842:	bf 93       	push	r27
    1844:	ef 93       	push	r30
    1846:	ff 93       	push	r31
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfunISRFun != NULL){
		EXTI_pfunISRFun[0]();
    1850:	e0 91 95 01 	lds	r30, 0x0195
    1854:	f0 91 96 01 	lds	r31, 0x0196
    1858:	09 95       	icall
	}

}
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	ff 91       	pop	r31
    1860:	ef 91       	pop	r30
    1862:	bf 91       	pop	r27
    1864:	af 91       	pop	r26
    1866:	9f 91       	pop	r25
    1868:	8f 91       	pop	r24
    186a:	7f 91       	pop	r23
    186c:	6f 91       	pop	r22
    186e:	5f 91       	pop	r21
    1870:	4f 91       	pop	r20
    1872:	3f 91       	pop	r19
    1874:	2f 91       	pop	r18
    1876:	0f 90       	pop	r0
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	0f 90       	pop	r0
    187c:	1f 90       	pop	r1
    187e:	18 95       	reti

00001880 <__vector_2>:



ISR(VECT_INT1){
    1880:	1f 92       	push	r1
    1882:	0f 92       	push	r0
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	0f 92       	push	r0
    1888:	11 24       	eor	r1, r1
    188a:	2f 93       	push	r18
    188c:	3f 93       	push	r19
    188e:	4f 93       	push	r20
    1890:	5f 93       	push	r21
    1892:	6f 93       	push	r22
    1894:	7f 93       	push	r23
    1896:	8f 93       	push	r24
    1898:	9f 93       	push	r25
    189a:	af 93       	push	r26
    189c:	bf 93       	push	r27
    189e:	ef 93       	push	r30
    18a0:	ff 93       	push	r31
    18a2:	df 93       	push	r29
    18a4:	cf 93       	push	r28
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfunISRFun != NULL){
			EXTI_pfunISRFun[1]();
    18aa:	e0 91 97 01 	lds	r30, 0x0197
    18ae:	f0 91 98 01 	lds	r31, 0x0198
    18b2:	09 95       	icall
	}

}
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	ff 91       	pop	r31
    18ba:	ef 91       	pop	r30
    18bc:	bf 91       	pop	r27
    18be:	af 91       	pop	r26
    18c0:	9f 91       	pop	r25
    18c2:	8f 91       	pop	r24
    18c4:	7f 91       	pop	r23
    18c6:	6f 91       	pop	r22
    18c8:	5f 91       	pop	r21
    18ca:	4f 91       	pop	r20
    18cc:	3f 91       	pop	r19
    18ce:	2f 91       	pop	r18
    18d0:	0f 90       	pop	r0
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	0f 90       	pop	r0
    18d6:	1f 90       	pop	r1
    18d8:	18 95       	reti

000018da <__vector_3>:


ISR(VECT_INT2){
    18da:	1f 92       	push	r1
    18dc:	0f 92       	push	r0
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	0f 92       	push	r0
    18e2:	11 24       	eor	r1, r1
    18e4:	2f 93       	push	r18
    18e6:	3f 93       	push	r19
    18e8:	4f 93       	push	r20
    18ea:	5f 93       	push	r21
    18ec:	6f 93       	push	r22
    18ee:	7f 93       	push	r23
    18f0:	8f 93       	push	r24
    18f2:	9f 93       	push	r25
    18f4:	af 93       	push	r26
    18f6:	bf 93       	push	r27
    18f8:	ef 93       	push	r30
    18fa:	ff 93       	push	r31
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfunISRFun != NULL){
			EXTI_pfunISRFun[2]();
    1904:	e0 91 99 01 	lds	r30, 0x0199
    1908:	f0 91 9a 01 	lds	r31, 0x019A
    190c:	09 95       	icall
}

}
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	ff 91       	pop	r31
    1914:	ef 91       	pop	r30
    1916:	bf 91       	pop	r27
    1918:	af 91       	pop	r26
    191a:	9f 91       	pop	r25
    191c:	8f 91       	pop	r24
    191e:	7f 91       	pop	r23
    1920:	6f 91       	pop	r22
    1922:	5f 91       	pop	r21
    1924:	4f 91       	pop	r20
    1926:	3f 91       	pop	r19
    1928:	2f 91       	pop	r18
    192a:	0f 90       	pop	r0
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	0f 90       	pop	r0
    1930:	1f 90       	pop	r1
    1932:	18 95       	reti

00001934 <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	0f 92       	push	r0
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    193e:	19 82       	std	Y+1, r1	; 0x01
	DDRA=CONC(DIO_u8PA7_DIR, DIO_u8PA6_DIR ,DIO_u8PA5_DIR ,DIO_u8PA4_DIR ,DIO_u8PA3_DIR ,DIO_u8PA2_DIR ,DIO_u8PA1_DIR ,DIO_u8PA0_DIR);
    1940:	ea e3       	ldi	r30, 0x3A	; 58
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	81 eb       	ldi	r24, 0xB1	; 177
    1946:	80 83       	st	Z, r24
	PORTA=CONC(DIO_u8PA7_VALUE	, DIO_u8PA6_VALUE ,DIO_u8PA5_VALUE ,DIO_u8PA4_VALUE ,DIO_u8PA3_VALUE ,DIO_u8PA2_VALUE ,DIO_u8PA1_VALUE ,DIO_u8PA0_VALUE);
    1948:	eb e3       	ldi	r30, 0x3B	; 59
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	86 e1       	ldi	r24, 0x16	; 22
    194e:	80 83       	st	Z, r24





	return Local_enuErrorState;
    1950:	89 81       	ldd	r24, Y+1	; 0x01
}
    1952:	0f 90       	pop	r0
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection (u8 Copy_u8PortID, u8 Copy_u8PinID , u8 Copy_u8Direction)
{
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	00 d0       	rcall	.+0      	; 0x1960 <DIO_enuSetPinDirection+0x6>
    1960:	00 d0       	rcall	.+0      	; 0x1962 <DIO_enuSetPinDirection+0x8>
    1962:	00 d0       	rcall	.+0      	; 0x1964 <DIO_enuSetPinDirection+0xa>
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	8a 83       	std	Y+2, r24	; 0x02
    196a:	6b 83       	std	Y+3, r22	; 0x03
    196c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    196e:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_u8GROUP_D && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Direction <= DIO_u8OUTPUT)
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	84 30       	cpi	r24, 0x04	; 4
    1974:	08 f0       	brcs	.+2      	; 0x1978 <DIO_enuSetPinDirection+0x1e>
    1976:	d1 c0       	rjmp	.+418    	; 0x1b1a <DIO_enuSetPinDirection+0x1c0>
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	88 30       	cpi	r24, 0x08	; 8
    197c:	08 f0       	brcs	.+2      	; 0x1980 <DIO_enuSetPinDirection+0x26>
    197e:	cd c0       	rjmp	.+410    	; 0x1b1a <DIO_enuSetPinDirection+0x1c0>
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
    1982:	82 30       	cpi	r24, 0x02	; 2
    1984:	08 f0       	brcs	.+2      	; 0x1988 <DIO_enuSetPinDirection+0x2e>
    1986:	c9 c0       	rjmp	.+402    	; 0x1b1a <DIO_enuSetPinDirection+0x1c0>
	{
		switch (Copy_u8PortID){
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	3e 83       	std	Y+6, r19	; 0x06
    1990:	2d 83       	std	Y+5, r18	; 0x05
    1992:	6d 81       	ldd	r22, Y+5	; 0x05
    1994:	7e 81       	ldd	r23, Y+6	; 0x06
    1996:	61 30       	cpi	r22, 0x01	; 1
    1998:	71 05       	cpc	r23, r1
    199a:	09 f4       	brne	.+2      	; 0x199e <DIO_enuSetPinDirection+0x44>
    199c:	41 c0       	rjmp	.+130    	; 0x1a20 <DIO_enuSetPinDirection+0xc6>
    199e:	8d 81       	ldd	r24, Y+5	; 0x05
    19a0:	9e 81       	ldd	r25, Y+6	; 0x06
    19a2:	82 30       	cpi	r24, 0x02	; 2
    19a4:	91 05       	cpc	r25, r1
    19a6:	34 f4       	brge	.+12     	; 0x19b4 <DIO_enuSetPinDirection+0x5a>
    19a8:	2d 81       	ldd	r18, Y+5	; 0x05
    19aa:	3e 81       	ldd	r19, Y+6	; 0x06
    19ac:	21 15       	cp	r18, r1
    19ae:	31 05       	cpc	r19, r1
    19b0:	71 f0       	breq	.+28     	; 0x19ce <DIO_enuSetPinDirection+0x74>
    19b2:	b0 c0       	rjmp	.+352    	; 0x1b14 <DIO_enuSetPinDirection+0x1ba>
    19b4:	6d 81       	ldd	r22, Y+5	; 0x05
    19b6:	7e 81       	ldd	r23, Y+6	; 0x06
    19b8:	62 30       	cpi	r22, 0x02	; 2
    19ba:	71 05       	cpc	r23, r1
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <DIO_enuSetPinDirection+0x66>
    19be:	59 c0       	rjmp	.+178    	; 0x1a72 <DIO_enuSetPinDirection+0x118>
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	9e 81       	ldd	r25, Y+6	; 0x06
    19c4:	83 30       	cpi	r24, 0x03	; 3
    19c6:	91 05       	cpc	r25, r1
    19c8:	09 f4       	brne	.+2      	; 0x19cc <DIO_enuSetPinDirection+0x72>
    19ca:	7c c0       	rjmp	.+248    	; 0x1ac4 <DIO_enuSetPinDirection+0x16a>
    19cc:	a3 c0       	rjmp	.+326    	; 0x1b14 <DIO_enuSetPinDirection+0x1ba>
		case DIO_u8GROUP_A:
			DDRA &=~(DIO_MASK_BIT<<Copy_u8PinID);
    19ce:	aa e3       	ldi	r26, 0x3A	; 58
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ea e3       	ldi	r30, 0x3A	; 58
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	48 2f       	mov	r20, r24
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <DIO_enuSetPinDirection+0x90>
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	2a 95       	dec	r18
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <DIO_enuSetPinDirection+0x8c>
    19ee:	80 95       	com	r24
    19f0:	84 23       	and	r24, r20
    19f2:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Direction<< Copy_u8PinID);
    19f4:	aa e3       	ldi	r26, 0x3A	; 58
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	ea e3       	ldi	r30, 0x3A	; 58
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	48 2f       	mov	r20, r24
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	88 2f       	mov	r24, r24
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	b9 01       	movw	r22, r18
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <DIO_enuSetPinDirection+0xba>
    1a10:	66 0f       	add	r22, r22
    1a12:	77 1f       	adc	r23, r23
    1a14:	8a 95       	dec	r24
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <DIO_enuSetPinDirection+0xb6>
    1a18:	cb 01       	movw	r24, r22
    1a1a:	84 2b       	or	r24, r20
    1a1c:	8c 93       	st	X, r24
    1a1e:	7a c0       	rjmp	.+244    	; 0x1b14 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_B:
			DDRB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1a20:	a7 e3       	ldi	r26, 0x37	; 55
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e7 e3       	ldi	r30, 0x37	; 55
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <DIO_enuSetPinDirection+0xe2>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	2a 95       	dec	r18
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <DIO_enuSetPinDirection+0xde>
    1a40:	80 95       	com	r24
    1a42:	84 23       	and	r24, r20
    1a44:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Direction<< Copy_u8PinID);
    1a46:	a7 e3       	ldi	r26, 0x37	; 55
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e7 e3       	ldi	r30, 0x37	; 55
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	48 2f       	mov	r20, r24
    1a52:	8c 81       	ldd	r24, Y+4	; 0x04
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	88 2f       	mov	r24, r24
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	b9 01       	movw	r22, r18
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <DIO_enuSetPinDirection+0x10c>
    1a62:	66 0f       	add	r22, r22
    1a64:	77 1f       	adc	r23, r23
    1a66:	8a 95       	dec	r24
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <DIO_enuSetPinDirection+0x108>
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	84 2b       	or	r24, r20
    1a6e:	8c 93       	st	X, r24
    1a70:	51 c0       	rjmp	.+162    	; 0x1b14 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_C:
			DDRC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1a72:	a4 e3       	ldi	r26, 0x34	; 52
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e4 e3       	ldi	r30, 0x34	; 52
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	48 2f       	mov	r20, r24
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <DIO_enuSetPinDirection+0x134>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	2a 95       	dec	r18
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <DIO_enuSetPinDirection+0x130>
    1a92:	80 95       	com	r24
    1a94:	84 23       	and	r24, r20
    1a96:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Direction<< Copy_u8PinID);
    1a98:	a4 e3       	ldi	r26, 0x34	; 52
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e4 e3       	ldi	r30, 0x34	; 52
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	48 2f       	mov	r20, r24
    1aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	88 2f       	mov	r24, r24
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	b9 01       	movw	r22, r18
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <DIO_enuSetPinDirection+0x15e>
    1ab4:	66 0f       	add	r22, r22
    1ab6:	77 1f       	adc	r23, r23
    1ab8:	8a 95       	dec	r24
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <DIO_enuSetPinDirection+0x15a>
    1abc:	cb 01       	movw	r24, r22
    1abe:	84 2b       	or	r24, r20
    1ac0:	8c 93       	st	X, r24
    1ac2:	28 c0       	rjmp	.+80     	; 0x1b14 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_D:
			DDRD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1ac4:	a1 e3       	ldi	r26, 0x31	; 49
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e1 e3       	ldi	r30, 0x31	; 49
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	48 2f       	mov	r20, r24
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <DIO_enuSetPinDirection+0x186>
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	2a 95       	dec	r18
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <DIO_enuSetPinDirection+0x182>
    1ae4:	80 95       	com	r24
    1ae6:	84 23       	and	r24, r20
    1ae8:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Direction<< Copy_u8PinID);
    1aea:	a1 e3       	ldi	r26, 0x31	; 49
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e1 e3       	ldi	r30, 0x31	; 49
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	48 2f       	mov	r20, r24
    1af6:	8c 81       	ldd	r24, Y+4	; 0x04
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	88 2f       	mov	r24, r24
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	b9 01       	movw	r22, r18
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <DIO_enuSetPinDirection+0x1b0>
    1b06:	66 0f       	add	r22, r22
    1b08:	77 1f       	adc	r23, r23
    1b0a:	8a 95       	dec	r24
    1b0c:	e2 f7       	brpl	.-8      	; 0x1b06 <DIO_enuSetPinDirection+0x1ac>
    1b0e:	cb 01       	movw	r24, r22
    1b10:	84 2b       	or	r24, r20
    1b12:	8c 93       	st	X, r24
			break;
		}
	 Local_enuErrorState = ES_OK;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	89 83       	std	Y+1, r24	; 0x01
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <DIO_enuSetPinDirection+0x1c4>

	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1b1a:	83 e0       	ldi	r24, 0x03	; 3
    1b1c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b20:	26 96       	adiw	r28, 0x06	; 6
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	08 95       	ret

00001b32 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue (u8 Copy_u8PortID, u8 Copy_u8PinID , u8 Copy_u8Value)
{
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	00 d0       	rcall	.+0      	; 0x1b38 <DIO_enuSetPinValue+0x6>
    1b38:	00 d0       	rcall	.+0      	; 0x1b3a <DIO_enuSetPinValue+0x8>
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <DIO_enuSetPinValue+0xa>
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	8a 83       	std	Y+2, r24	; 0x02
    1b42:	6b 83       	std	Y+3, r22	; 0x03
    1b44:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1b46:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_u8GROUP_D && Copy_u8PinID <= DIO_u8PIN7 && (Copy_u8Value <= DIO_u8HIGH || Copy_u8Value<= DIO_u8PULL_UP))
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	84 30       	cpi	r24, 0x04	; 4
    1b4c:	08 f0       	brcs	.+2      	; 0x1b50 <DIO_enuSetPinValue+0x1e>
    1b4e:	d4 c0       	rjmp	.+424    	; 0x1cf8 <DIO_enuSetPinValue+0x1c6>
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	88 30       	cpi	r24, 0x08	; 8
    1b54:	08 f0       	brcs	.+2      	; 0x1b58 <DIO_enuSetPinValue+0x26>
    1b56:	d0 c0       	rjmp	.+416    	; 0x1cf8 <DIO_enuSetPinValue+0x1c6>
    1b58:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5a:	82 30       	cpi	r24, 0x02	; 2
    1b5c:	20 f0       	brcs	.+8      	; 0x1b66 <DIO_enuSetPinValue+0x34>
    1b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b60:	82 30       	cpi	r24, 0x02	; 2
    1b62:	08 f0       	brcs	.+2      	; 0x1b66 <DIO_enuSetPinValue+0x34>
    1b64:	c9 c0       	rjmp	.+402    	; 0x1cf8 <DIO_enuSetPinValue+0x1c6>
	{
		switch (Copy_u8PortID){
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	3e 83       	std	Y+6, r19	; 0x06
    1b6e:	2d 83       	std	Y+5, r18	; 0x05
    1b70:	6d 81       	ldd	r22, Y+5	; 0x05
    1b72:	7e 81       	ldd	r23, Y+6	; 0x06
    1b74:	61 30       	cpi	r22, 0x01	; 1
    1b76:	71 05       	cpc	r23, r1
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <DIO_enuSetPinValue+0x4a>
    1b7a:	41 c0       	rjmp	.+130    	; 0x1bfe <DIO_enuSetPinValue+0xcc>
    1b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b80:	82 30       	cpi	r24, 0x02	; 2
    1b82:	91 05       	cpc	r25, r1
    1b84:	34 f4       	brge	.+12     	; 0x1b92 <DIO_enuSetPinValue+0x60>
    1b86:	2d 81       	ldd	r18, Y+5	; 0x05
    1b88:	3e 81       	ldd	r19, Y+6	; 0x06
    1b8a:	21 15       	cp	r18, r1
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	71 f0       	breq	.+28     	; 0x1bac <DIO_enuSetPinValue+0x7a>
    1b90:	b0 c0       	rjmp	.+352    	; 0x1cf2 <DIO_enuSetPinValue+0x1c0>
    1b92:	6d 81       	ldd	r22, Y+5	; 0x05
    1b94:	7e 81       	ldd	r23, Y+6	; 0x06
    1b96:	62 30       	cpi	r22, 0x02	; 2
    1b98:	71 05       	cpc	r23, r1
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <DIO_enuSetPinValue+0x6c>
    1b9c:	59 c0       	rjmp	.+178    	; 0x1c50 <DIO_enuSetPinValue+0x11e>
    1b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba2:	83 30       	cpi	r24, 0x03	; 3
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	09 f4       	brne	.+2      	; 0x1baa <DIO_enuSetPinValue+0x78>
    1ba8:	7c c0       	rjmp	.+248    	; 0x1ca2 <DIO_enuSetPinValue+0x170>
    1baa:	a3 c0       	rjmp	.+326    	; 0x1cf2 <DIO_enuSetPinValue+0x1c0>
		case DIO_u8GROUP_A:
			PORTA &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1bac:	ab e3       	ldi	r26, 0x3B	; 59
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	eb e3       	ldi	r30, 0x3B	; 59
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	48 2f       	mov	r20, r24
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <DIO_enuSetPinValue+0x96>
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	2a 95       	dec	r18
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <DIO_enuSetPinValue+0x92>
    1bcc:	80 95       	com	r24
    1bce:	84 23       	and	r24, r20
    1bd0:	8c 93       	st	X, r24
			PORTA |= (Copy_u8Value<< Copy_u8PinID);
    1bd2:	ab e3       	ldi	r26, 0x3B	; 59
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	eb e3       	ldi	r30, 0x3B	; 59
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	48 2f       	mov	r20, r24
    1bde:	8c 81       	ldd	r24, Y+4	; 0x04
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	88 2f       	mov	r24, r24
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	b9 01       	movw	r22, r18
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <DIO_enuSetPinValue+0xc0>
    1bee:	66 0f       	add	r22, r22
    1bf0:	77 1f       	adc	r23, r23
    1bf2:	8a 95       	dec	r24
    1bf4:	e2 f7       	brpl	.-8      	; 0x1bee <DIO_enuSetPinValue+0xbc>
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	84 2b       	or	r24, r20
    1bfa:	8c 93       	st	X, r24
    1bfc:	7a c0       	rjmp	.+244    	; 0x1cf2 <DIO_enuSetPinValue+0x1c0>
			break;
		case DIO_u8GROUP_B:
			PORTB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1bfe:	a8 e3       	ldi	r26, 0x38	; 56
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e8 e3       	ldi	r30, 0x38	; 56
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	48 2f       	mov	r20, r24
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <DIO_enuSetPinValue+0xe8>
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	2a 95       	dec	r18
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <DIO_enuSetPinValue+0xe4>
    1c1e:	80 95       	com	r24
    1c20:	84 23       	and	r24, r20
    1c22:	8c 93       	st	X, r24
			PORTB |= (Copy_u8Value<< Copy_u8PinID);
    1c24:	a8 e3       	ldi	r26, 0x38	; 56
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e8 e3       	ldi	r30, 0x38	; 56
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	48 2f       	mov	r20, r24
    1c30:	8c 81       	ldd	r24, Y+4	; 0x04
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	88 2f       	mov	r24, r24
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	b9 01       	movw	r22, r18
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <DIO_enuSetPinValue+0x112>
    1c40:	66 0f       	add	r22, r22
    1c42:	77 1f       	adc	r23, r23
    1c44:	8a 95       	dec	r24
    1c46:	e2 f7       	brpl	.-8      	; 0x1c40 <DIO_enuSetPinValue+0x10e>
    1c48:	cb 01       	movw	r24, r22
    1c4a:	84 2b       	or	r24, r20
    1c4c:	8c 93       	st	X, r24
    1c4e:	51 c0       	rjmp	.+162    	; 0x1cf2 <DIO_enuSetPinValue+0x1c0>
			break;
		case DIO_u8GROUP_C:
			PORTC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1c50:	a5 e3       	ldi	r26, 0x35	; 53
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e5 e3       	ldi	r30, 0x35	; 53
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	48 2f       	mov	r20, r24
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <DIO_enuSetPinValue+0x13a>
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	2a 95       	dec	r18
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <DIO_enuSetPinValue+0x136>
    1c70:	80 95       	com	r24
    1c72:	84 23       	and	r24, r20
    1c74:	8c 93       	st	X, r24
			PORTC |= (Copy_u8Value<< Copy_u8PinID);
    1c76:	a5 e3       	ldi	r26, 0x35	; 53
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	e5 e3       	ldi	r30, 0x35	; 53
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	48 2f       	mov	r20, r24
    1c82:	8c 81       	ldd	r24, Y+4	; 0x04
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	88 2f       	mov	r24, r24
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	b9 01       	movw	r22, r18
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <DIO_enuSetPinValue+0x164>
    1c92:	66 0f       	add	r22, r22
    1c94:	77 1f       	adc	r23, r23
    1c96:	8a 95       	dec	r24
    1c98:	e2 f7       	brpl	.-8      	; 0x1c92 <DIO_enuSetPinValue+0x160>
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	84 2b       	or	r24, r20
    1c9e:	8c 93       	st	X, r24
    1ca0:	28 c0       	rjmp	.+80     	; 0x1cf2 <DIO_enuSetPinValue+0x1c0>
			break;
		case DIO_u8GROUP_D:
			PORTD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1ca2:	a2 e3       	ldi	r26, 0x32	; 50
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	e2 e3       	ldi	r30, 0x32	; 50
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	48 2f       	mov	r20, r24
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <DIO_enuSetPinValue+0x18c>
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	2a 95       	dec	r18
    1cc0:	e2 f7       	brpl	.-8      	; 0x1cba <DIO_enuSetPinValue+0x188>
    1cc2:	80 95       	com	r24
    1cc4:	84 23       	and	r24, r20
    1cc6:	8c 93       	st	X, r24
			PORTD |= (Copy_u8Value<< Copy_u8PinID);
    1cc8:	a2 e3       	ldi	r26, 0x32	; 50
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e2 e3       	ldi	r30, 0x32	; 50
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	48 2f       	mov	r20, r24
    1cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	88 2f       	mov	r24, r24
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	b9 01       	movw	r22, r18
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <DIO_enuSetPinValue+0x1b6>
    1ce4:	66 0f       	add	r22, r22
    1ce6:	77 1f       	adc	r23, r23
    1ce8:	8a 95       	dec	r24
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <DIO_enuSetPinValue+0x1b2>
    1cec:	cb 01       	movw	r24, r22
    1cee:	84 2b       	or	r24, r20
    1cf0:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <DIO_enuSetPinValue+0x1ca>

	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1cf8:	83 e0       	ldi	r24, 0x03	; 3
    1cfa:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cfe:	26 96       	adiw	r28, 0x06	; 6
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue (u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <DIO_enuTogPinValue+0x6>
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <DIO_enuTogPinValue+0x8>
    1d18:	0f 92       	push	r0
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	8a 83       	std	Y+2, r24	; 0x02
    1d20:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1d22:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_u8GROUP_D
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	84 30       	cpi	r24, 0x04	; 4
    1d28:	08 f0       	brcs	.+2      	; 0x1d2c <DIO_enuTogPinValue+0x1c>
    1d2a:	75 c0       	rjmp	.+234    	; 0x1e16 <DIO_enuTogPinValue+0x106>
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	88 30       	cpi	r24, 0x08	; 8
    1d30:	08 f0       	brcs	.+2      	; 0x1d34 <DIO_enuTogPinValue+0x24>
    1d32:	71 c0       	rjmp	.+226    	; 0x1e16 <DIO_enuTogPinValue+0x106>
			&& Copy_u8PinID <= DIO_u8PIN7 )
	{
		switch (Copy_u8PortID){
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	3d 83       	std	Y+5, r19	; 0x05
    1d3c:	2c 83       	std	Y+4, r18	; 0x04
    1d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d40:	9d 81       	ldd	r25, Y+5	; 0x05
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	91 05       	cpc	r25, r1
    1d46:	49 f1       	breq	.+82     	; 0x1d9a <DIO_enuTogPinValue+0x8a>
    1d48:	2c 81       	ldd	r18, Y+4	; 0x04
    1d4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d4c:	22 30       	cpi	r18, 0x02	; 2
    1d4e:	31 05       	cpc	r19, r1
    1d50:	2c f4       	brge	.+10     	; 0x1d5c <DIO_enuTogPinValue+0x4c>
    1d52:	8c 81       	ldd	r24, Y+4	; 0x04
    1d54:	9d 81       	ldd	r25, Y+5	; 0x05
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	61 f0       	breq	.+24     	; 0x1d72 <DIO_enuTogPinValue+0x62>
    1d5a:	5a c0       	rjmp	.+180    	; 0x1e10 <DIO_enuTogPinValue+0x100>
    1d5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d60:	22 30       	cpi	r18, 0x02	; 2
    1d62:	31 05       	cpc	r19, r1
    1d64:	71 f1       	breq	.+92     	; 0x1dc2 <DIO_enuTogPinValue+0xb2>
    1d66:	8c 81       	ldd	r24, Y+4	; 0x04
    1d68:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6a:	83 30       	cpi	r24, 0x03	; 3
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	e9 f1       	breq	.+122    	; 0x1dea <DIO_enuTogPinValue+0xda>
    1d70:	4f c0       	rjmp	.+158    	; 0x1e10 <DIO_enuTogPinValue+0x100>
		case DIO_u8GROUP_A:
			PORTA ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1d72:	ab e3       	ldi	r26, 0x3B	; 59
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	eb e3       	ldi	r30, 0x3B	; 59
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	48 2f       	mov	r20, r24
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	02 2e       	mov	r0, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <DIO_enuTogPinValue+0x80>
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	0a 94       	dec	r0
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <DIO_enuTogPinValue+0x7c>
    1d94:	84 27       	eor	r24, r20
    1d96:	8c 93       	st	X, r24
    1d98:	3b c0       	rjmp	.+118    	; 0x1e10 <DIO_enuTogPinValue+0x100>

			break;
		case DIO_u8GROUP_B:
			PORTB ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1d9a:	a8 e3       	ldi	r26, 0x38	; 56
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e8 e3       	ldi	r30, 0x38	; 56
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	48 2f       	mov	r20, r24
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	02 2e       	mov	r0, r18
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <DIO_enuTogPinValue+0xa8>
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	0a 94       	dec	r0
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <DIO_enuTogPinValue+0xa4>
    1dbc:	84 27       	eor	r24, r20
    1dbe:	8c 93       	st	X, r24
    1dc0:	27 c0       	rjmp	.+78     	; 0x1e10 <DIO_enuTogPinValue+0x100>

			break;
		case DIO_u8GROUP_C:
			PORTC ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1dc2:	a5 e3       	ldi	r26, 0x35	; 53
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e5 e3       	ldi	r30, 0x35	; 53
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	48 2f       	mov	r20, r24
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	02 2e       	mov	r0, r18
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <DIO_enuTogPinValue+0xd0>
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	0a 94       	dec	r0
    1de2:	e2 f7       	brpl	.-8      	; 0x1ddc <DIO_enuTogPinValue+0xcc>
    1de4:	84 27       	eor	r24, r20
    1de6:	8c 93       	st	X, r24
    1de8:	13 c0       	rjmp	.+38     	; 0x1e10 <DIO_enuTogPinValue+0x100>

			break;
		case DIO_u8GROUP_D:
			PORTD ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1dea:	a2 e3       	ldi	r26, 0x32	; 50
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e2 e3       	ldi	r30, 0x32	; 50
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	48 2f       	mov	r20, r24
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	28 2f       	mov	r18, r24
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	02 2e       	mov	r0, r18
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <DIO_enuTogPinValue+0xf8>
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	0a 94       	dec	r0
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <DIO_enuTogPinValue+0xf4>
    1e0c:	84 27       	eor	r24, r20
    1e0e:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	89 83       	std	Y+1, r24	; 0x01
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <DIO_enuTogPinValue+0x10a>

	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1e16:	83 e0       	ldi	r24, 0x03	; 3
    1e18:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <DIO_enuGetPinValue>:
ES_t DIO_enuGetPinValue (u8 Copy_u8PortID, u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	27 97       	sbiw	r28, 0x07	; 7
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	8a 83       	std	Y+2, r24	; 0x02
    1e42:	6b 83       	std	Y+3, r22	; 0x03
    1e44:	5d 83       	std	Y+5, r21	; 0x05
    1e46:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1e48:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pu8Value != NULL)
    1e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <DIO_enuGetPinValue+0x28>
    1e52:	7e c0       	rjmp	.+252    	; 0x1f50 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_u8GROUP_D
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	84 30       	cpi	r24, 0x04	; 4
    1e58:	08 f0       	brcs	.+2      	; 0x1e5c <DIO_enuGetPinValue+0x30>
    1e5a:	77 c0       	rjmp	.+238    	; 0x1f4a <DIO_enuGetPinValue+0x11e>
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	88 30       	cpi	r24, 0x08	; 8
    1e60:	08 f0       	brcs	.+2      	; 0x1e64 <DIO_enuGetPinValue+0x38>
    1e62:	73 c0       	rjmp	.+230    	; 0x1f4a <DIO_enuGetPinValue+0x11e>
				&& Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8PortID){
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	3f 83       	std	Y+7, r19	; 0x07
    1e6c:	2e 83       	std	Y+6, r18	; 0x06
    1e6e:	4e 81       	ldd	r20, Y+6	; 0x06
    1e70:	5f 81       	ldd	r21, Y+7	; 0x07
    1e72:	41 30       	cpi	r20, 0x01	; 1
    1e74:	51 05       	cpc	r21, r1
    1e76:	59 f1       	breq	.+86     	; 0x1ece <DIO_enuGetPinValue+0xa2>
    1e78:	8e 81       	ldd	r24, Y+6	; 0x06
    1e7a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e7c:	82 30       	cpi	r24, 0x02	; 2
    1e7e:	91 05       	cpc	r25, r1
    1e80:	34 f4       	brge	.+12     	; 0x1e8e <DIO_enuGetPinValue+0x62>
    1e82:	2e 81       	ldd	r18, Y+6	; 0x06
    1e84:	3f 81       	ldd	r19, Y+7	; 0x07
    1e86:	21 15       	cp	r18, r1
    1e88:	31 05       	cpc	r19, r1
    1e8a:	69 f0       	breq	.+26     	; 0x1ea6 <DIO_enuGetPinValue+0x7a>
    1e8c:	5b c0       	rjmp	.+182    	; 0x1f44 <DIO_enuGetPinValue+0x118>
    1e8e:	4e 81       	ldd	r20, Y+6	; 0x06
    1e90:	5f 81       	ldd	r21, Y+7	; 0x07
    1e92:	42 30       	cpi	r20, 0x02	; 2
    1e94:	51 05       	cpc	r21, r1
    1e96:	79 f1       	breq	.+94     	; 0x1ef6 <DIO_enuGetPinValue+0xca>
    1e98:	8e 81       	ldd	r24, Y+6	; 0x06
    1e9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e9c:	83 30       	cpi	r24, 0x03	; 3
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <DIO_enuGetPinValue+0x78>
    1ea2:	3d c0       	rjmp	.+122    	; 0x1f1e <DIO_enuGetPinValue+0xf2>
    1ea4:	4f c0       	rjmp	.+158    	; 0x1f44 <DIO_enuGetPinValue+0x118>
					case DIO_u8GROUP_A:
						* Copy_pu8Value = ((PINA>>Copy_u8PinID) &  DIO_MASK_BIT);
    1ea6:	e9 e3       	ldi	r30, 0x39	; 57
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	28 2f       	mov	r18, r24
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	88 2f       	mov	r24, r24
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	a9 01       	movw	r20, r18
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <DIO_enuGetPinValue+0x92>
    1eba:	55 95       	asr	r21
    1ebc:	47 95       	ror	r20
    1ebe:	8a 95       	dec	r24
    1ec0:	e2 f7       	brpl	.-8      	; 0x1eba <DIO_enuGetPinValue+0x8e>
    1ec2:	ca 01       	movw	r24, r20
    1ec4:	81 70       	andi	r24, 0x01	; 1
    1ec6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ec8:	fd 81       	ldd	r31, Y+5	; 0x05
    1eca:	80 83       	st	Z, r24
    1ecc:	3b c0       	rjmp	.+118    	; 0x1f44 <DIO_enuGetPinValue+0x118>

						break;
					case DIO_u8GROUP_B:
						* Copy_pu8Value = ((PINA>>Copy_u8PinID) &  DIO_MASK_BIT);
    1ece:	e9 e3       	ldi	r30, 0x39	; 57
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	88 2f       	mov	r24, r24
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	a9 01       	movw	r20, r18
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <DIO_enuGetPinValue+0xba>
    1ee2:	55 95       	asr	r21
    1ee4:	47 95       	ror	r20
    1ee6:	8a 95       	dec	r24
    1ee8:	e2 f7       	brpl	.-8      	; 0x1ee2 <DIO_enuGetPinValue+0xb6>
    1eea:	ca 01       	movw	r24, r20
    1eec:	81 70       	andi	r24, 0x01	; 1
    1eee:	ec 81       	ldd	r30, Y+4	; 0x04
    1ef0:	fd 81       	ldd	r31, Y+5	; 0x05
    1ef2:	80 83       	st	Z, r24
    1ef4:	27 c0       	rjmp	.+78     	; 0x1f44 <DIO_enuGetPinValue+0x118>

						break;
					case DIO_u8GROUP_C:
						* Copy_pu8Value = ((PINA>>Copy_u8PinID) &  DIO_MASK_BIT);
    1ef6:	e9 e3       	ldi	r30, 0x39	; 57
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	88 2f       	mov	r24, r24
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a9 01       	movw	r20, r18
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <DIO_enuGetPinValue+0xe2>
    1f0a:	55 95       	asr	r21
    1f0c:	47 95       	ror	r20
    1f0e:	8a 95       	dec	r24
    1f10:	e2 f7       	brpl	.-8      	; 0x1f0a <DIO_enuGetPinValue+0xde>
    1f12:	ca 01       	movw	r24, r20
    1f14:	81 70       	andi	r24, 0x01	; 1
    1f16:	ec 81       	ldd	r30, Y+4	; 0x04
    1f18:	fd 81       	ldd	r31, Y+5	; 0x05
    1f1a:	80 83       	st	Z, r24
    1f1c:	13 c0       	rjmp	.+38     	; 0x1f44 <DIO_enuGetPinValue+0x118>

						break;
					case DIO_u8GROUP_D:
						* Copy_pu8Value = ((PINA>>Copy_u8PinID) &  DIO_MASK_BIT);
    1f1e:	e9 e3       	ldi	r30, 0x39	; 57
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	88 2f       	mov	r24, r24
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	a9 01       	movw	r20, r18
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <DIO_enuGetPinValue+0x10a>
    1f32:	55 95       	asr	r21
    1f34:	47 95       	ror	r20
    1f36:	8a 95       	dec	r24
    1f38:	e2 f7       	brpl	.-8      	; 0x1f32 <DIO_enuGetPinValue+0x106>
    1f3a:	ca 01       	movw	r24, r20
    1f3c:	81 70       	andi	r24, 0x01	; 1
    1f3e:	ec 81       	ldd	r30, Y+4	; 0x04
    1f40:	fd 81       	ldd	r31, Y+5	; 0x05
    1f42:	80 83       	st	Z, r24
						break;
					}
					Local_enuErrorState = ES_OK;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	89 83       	std	Y+1, r24	; 0x01
    1f48:	05 c0       	rjmp	.+10     	; 0x1f54 <DIO_enuGetPinValue+0x128>

		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1f4a:	83 e0       	ldi	r24, 0x03	; 3
    1f4c:	89 83       	std	Y+1, r24	; 0x01
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <DIO_enuGetPinValue+0x128>



	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1f50:	82 e0       	ldi	r24, 0x02	; 2
    1f52:	89 83       	std	Y+1, r24	; 0x01
	}




	return Local_enuErrorState;
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f56:	27 96       	adiw	r28, 0x07	; 7
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <Switch_enuInit>:
#include "Switch_config.h"
#include "Switch_priv.h"

extern SW_t Switch_AstrSwitchconfig [SW_NUM];
ES_t Switch_enuInit()
{
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <Switch_enuInit+0x6>
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <Switch_enuInit+0x8>
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1f74:	1c 82       	std	Y+4, r1	; 0x04
	u16 Local_u16ErrorState=0;
    1f76:	1b 82       	std	Y+3, r1	; 0x03
    1f78:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterator=0;
    1f7a:	19 82       	std	Y+1, r1	; 0x01
	for (Local_u8Iterator = 0; Local_u8Iterator< SW_NUM; Local_u8Iterator++){
    1f7c:	19 82       	std	Y+1, r1	; 0x01
    1f7e:	5a c0       	rjmp	.+180    	; 0x2034 <Switch_enuInit+0xcc>
		Local_u16ErrorState = ( DIO_enuSetPinDirection(Switch_AstrSwitchconfig[Local_u8Iterator].sw_port, Switch_AstrSwitchconfig[Local_u8Iterator].sw_pin, DIO_u8INPUT));
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	c9 01       	movw	r24, r18
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	82 0f       	add	r24, r18
    1f8e:	93 1f       	adc	r25, r19
    1f90:	fc 01       	movw	r30, r24
    1f92:	e2 59       	subi	r30, 0x92	; 146
    1f94:	fe 4f       	sbci	r31, 0xFE	; 254
    1f96:	40 81       	ld	r20, Z
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	c9 01       	movw	r24, r18
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	82 0f       	add	r24, r18
    1fa6:	93 1f       	adc	r25, r19
    1fa8:	fc 01       	movw	r30, r24
    1faa:	e1 59       	subi	r30, 0x91	; 145
    1fac:	fe 4f       	sbci	r31, 0xFE	; 254
    1fae:	90 81       	ld	r25, Z
    1fb0:	84 2f       	mov	r24, r20
    1fb2:	69 2f       	mov	r22, r25
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	0e 94 ad 0c 	call	0x195a	; 0x195a <DIO_enuSetPinDirection>
    1fba:	88 2f       	mov	r24, r24
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	9b 83       	std	Y+3, r25	; 0x03
    1fc0:	8a 83       	std	Y+2, r24	; 0x02
		Local_u16ErrorState |= (DIO_enuSetPinValue((Switch_AstrSwitchconfig+Local_u8Iterator)->sw_port, (Switch_AstrSwitchconfig+Local_u8Iterator)->sw_pin,(Switch_AstrSwitchconfig+Local_u8Iterator)->sw_state) )<<2;
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	c9 01       	movw	r24, r18
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	82 0f       	add	r24, r18
    1fd0:	93 1f       	adc	r25, r19
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	e2 59       	subi	r30, 0x92	; 146
    1fd6:	fe 4f       	sbci	r31, 0xFE	; 254
    1fd8:	50 81       	ld	r21, Z
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	28 2f       	mov	r18, r24
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	c9 01       	movw	r24, r18
    1fe2:	88 0f       	add	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	82 0f       	add	r24, r18
    1fe8:	93 1f       	adc	r25, r19
    1fea:	fc 01       	movw	r30, r24
    1fec:	e2 59       	subi	r30, 0x92	; 146
    1fee:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff0:	41 81       	ldd	r20, Z+1	; 0x01
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	28 2f       	mov	r18, r24
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	c9 01       	movw	r24, r18
    1ffa:	88 0f       	add	r24, r24
    1ffc:	99 1f       	adc	r25, r25
    1ffe:	82 0f       	add	r24, r18
    2000:	93 1f       	adc	r25, r19
    2002:	fc 01       	movw	r30, r24
    2004:	e2 59       	subi	r30, 0x92	; 146
    2006:	fe 4f       	sbci	r31, 0xFE	; 254
    2008:	92 81       	ldd	r25, Z+2	; 0x02
    200a:	85 2f       	mov	r24, r21
    200c:	64 2f       	mov	r22, r20
    200e:	49 2f       	mov	r20, r25
    2010:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <DIO_enuSetPinValue>
    2014:	88 2f       	mov	r24, r24
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	9c 01       	movw	r18, r24
    2022:	8a 81       	ldd	r24, Y+2	; 0x02
    2024:	9b 81       	ldd	r25, Y+3	; 0x03
    2026:	82 2b       	or	r24, r18
    2028:	93 2b       	or	r25, r19
    202a:	9b 83       	std	Y+3, r25	; 0x03
    202c:	8a 83       	std	Y+2, r24	; 0x02
ES_t Switch_enuInit()
{
	ES_t Local_enuErrorState = ES_NOK;
	u16 Local_u16ErrorState=0;
	u8 Local_u8Iterator=0;
	for (Local_u8Iterator = 0; Local_u8Iterator< SW_NUM; Local_u8Iterator++){
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	8f 5f       	subi	r24, 0xFF	; 255
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	88 23       	and	r24, r24
    2038:	09 f4       	brne	.+2      	; 0x203c <Switch_enuInit+0xd4>
    203a:	a2 cf       	rjmp	.-188    	; 0x1f80 <Switch_enuInit+0x18>
		Local_u16ErrorState = ( DIO_enuSetPinDirection(Switch_AstrSwitchconfig[Local_u8Iterator].sw_port, Switch_AstrSwitchconfig[Local_u8Iterator].sw_pin, DIO_u8INPUT));
		Local_u16ErrorState |= (DIO_enuSetPinValue((Switch_AstrSwitchconfig+Local_u8Iterator)->sw_port, (Switch_AstrSwitchconfig+Local_u8Iterator)->sw_pin,(Switch_AstrSwitchconfig+Local_u8Iterator)->sw_state) )<<2;
	}
	if (Local_u16ErrorState== 5){
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	9b 81       	ldd	r25, Y+3	; 0x03
    2040:	85 30       	cpi	r24, 0x05	; 5
    2042:	91 05       	cpc	r25, r1
    2044:	11 f4       	brne	.+4      	; 0x204a <Switch_enuInit+0xe2>
		Local_enuErrorState =ES_OK;
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	8c 83       	std	Y+4, r24	; 0x04
	}


	return Local_enuErrorState;
    204a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <Switch_enuGetstate>:
ES_t Switch_enuGetstate( u8 * Copy_pu8value ){
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	00 d0       	rcall	.+0      	; 0x2060 <Switch_enuGetstate+0x6>
    2060:	0f 92       	push	r0
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    2066:	9b 83       	std	Y+3, r25	; 0x03
    2068:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    206a:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuGetPinValue(Switch_AstrSwitchconfig->sw_port , Switch_AstrSwitchconfig->sw_pin,Copy_pu8value);
    206c:	80 91 6e 01 	lds	r24, 0x016E
    2070:	90 91 6f 01 	lds	r25, 0x016F
    2074:	2a 81       	ldd	r18, Y+2	; 0x02
    2076:	3b 81       	ldd	r19, Y+3	; 0x03
    2078:	69 2f       	mov	r22, r25
    207a:	a9 01       	movw	r20, r18
    207c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_enuGetPinValue>


	return Local_enuErrorState ;
    2080:	89 81       	ldd	r24, Y+1	; 0x01
}
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <LED_init>:
#include "LED_config.h"
#include "LED_priv.h"

extern LED_t LED_AstrLEDconfig [LED_NUM];

ES_t LED_init(){
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	00 d0       	rcall	.+0      	; 0x2094 <LED_init+0x6>
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    2098:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Iterator;
	for (Local_u8Iterator = 0; Local_u8Iterator<= LED_NUM; Local_u8Iterator++){
    209a:	19 82       	std	Y+1, r1	; 0x01
    209c:	21 c0       	rjmp	.+66     	; 0x20e0 <LED_init+0x52>

		Local_enuErrorStates= DIO_enuSetPinDirection(LED_AstrLEDconfig[Local_u8Iterator].LED_port,LED_AstrLEDconfig[Local_u8Iterator].LED_pin,DIO_u8OUTPUT);
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	c9 01       	movw	r24, r18
    20a6:	88 0f       	add	r24, r24
    20a8:	99 1f       	adc	r25, r25
    20aa:	82 0f       	add	r24, r18
    20ac:	93 1f       	adc	r25, r19
    20ae:	fc 01       	movw	r30, r24
    20b0:	ef 58       	subi	r30, 0x8F	; 143
    20b2:	fe 4f       	sbci	r31, 0xFE	; 254
    20b4:	40 81       	ld	r20, Z
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	c9 01       	movw	r24, r18
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	82 0f       	add	r24, r18
    20c4:	93 1f       	adc	r25, r19
    20c6:	fc 01       	movw	r30, r24
    20c8:	ee 58       	subi	r30, 0x8E	; 142
    20ca:	fe 4f       	sbci	r31, 0xFE	; 254
    20cc:	90 81       	ld	r25, Z
    20ce:	84 2f       	mov	r24, r20
    20d0:	69 2f       	mov	r22, r25
    20d2:	41 e0       	ldi	r20, 0x01	; 1
    20d4:	0e 94 ad 0c 	call	0x195a	; 0x195a <DIO_enuSetPinDirection>
    20d8:	8a 83       	std	Y+2, r24	; 0x02

ES_t LED_init(){
	ES_t Local_enuErrorStates = ES_NOK;

	u8 Local_u8Iterator;
	for (Local_u8Iterator = 0; Local_u8Iterator<= LED_NUM; Local_u8Iterator++){
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	8f 5f       	subi	r24, 0xFF	; 255
    20de:	89 83       	std	Y+1, r24	; 0x01
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	87 30       	cpi	r24, 0x07	; 7
    20e4:	e0 f2       	brcs	.-72     	; 0x209e <LED_init+0x10>

		Local_enuErrorStates= DIO_enuSetPinDirection(LED_AstrLEDconfig[Local_u8Iterator].LED_port,LED_AstrLEDconfig[Local_u8Iterator].LED_pin,DIO_u8OUTPUT);

		}
	return Local_enuErrorStates;
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <LED_ON>:
ES_t LED_ON(u8 CopypAstrLEDinfo){
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <LED_ON+0x6>
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorStates = ES_NOK;
    20fe:	19 82       	std	Y+1, r1	; 0x01
		if(CopypAstrLEDinfo < LED_NUM){
    2100:	8a 81       	ldd	r24, Y+2	; 0x02
    2102:	86 30       	cpi	r24, 0x06	; 6
    2104:	08 f0       	brcs	.+2      	; 0x2108 <LED_ON+0x16>
    2106:	5d c0       	rjmp	.+186    	; 0x21c2 <LED_ON+0xd0>
			if(LED_AstrLEDconfig[CopypAstrLEDinfo].LED_connection == PULL_DOWN){
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	c9 01       	movw	r24, r18
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	82 0f       	add	r24, r18
    2116:	93 1f       	adc	r25, r19
    2118:	fc 01       	movw	r30, r24
    211a:	ed 58       	subi	r30, 0x8D	; 141
    211c:	fe 4f       	sbci	r31, 0xFE	; 254
    211e:	80 81       	ld	r24, Z
    2120:	88 23       	and	r24, r24
    2122:	f9 f4       	brne	.+62     	; 0x2162 <LED_ON+0x70>
				Local_enuErrorStates = DIO_enuSetPinValue(LED_AstrLEDconfig[CopypAstrLEDinfo].LED_port, LED_AstrLEDconfig[CopypAstrLEDinfo].LED_pin, DIO_u8LOW);
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	28 2f       	mov	r18, r24
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	c9 01       	movw	r24, r18
    212c:	88 0f       	add	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	82 0f       	add	r24, r18
    2132:	93 1f       	adc	r25, r19
    2134:	fc 01       	movw	r30, r24
    2136:	ef 58       	subi	r30, 0x8F	; 143
    2138:	fe 4f       	sbci	r31, 0xFE	; 254
    213a:	40 81       	ld	r20, Z
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	c9 01       	movw	r24, r18
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	82 0f       	add	r24, r18
    214a:	93 1f       	adc	r25, r19
    214c:	fc 01       	movw	r30, r24
    214e:	ee 58       	subi	r30, 0x8E	; 142
    2150:	fe 4f       	sbci	r31, 0xFE	; 254
    2152:	90 81       	ld	r25, Z
    2154:	84 2f       	mov	r24, r20
    2156:	69 2f       	mov	r22, r25
    2158:	40 e0       	ldi	r20, 0x00	; 0
    215a:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <DIO_enuSetPinValue>
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	32 c0       	rjmp	.+100    	; 0x21c6 <LED_ON+0xd4>
			}
			else if(LED_AstrLEDconfig[CopypAstrLEDinfo].LED_connection == PULL_UP){
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	c9 01       	movw	r24, r18
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	82 0f       	add	r24, r18
    2170:	93 1f       	adc	r25, r19
    2172:	fc 01       	movw	r30, r24
    2174:	ed 58       	subi	r30, 0x8D	; 141
    2176:	fe 4f       	sbci	r31, 0xFE	; 254
    2178:	80 81       	ld	r24, Z
    217a:	81 30       	cpi	r24, 0x01	; 1
    217c:	f9 f4       	brne	.+62     	; 0x21bc <LED_ON+0xca>
				Local_enuErrorStates = DIO_enuSetPinValue(LED_AstrLEDconfig[CopypAstrLEDinfo].LED_port, LED_AstrLEDconfig[CopypAstrLEDinfo].LED_pin, DIO_u8HIGH);
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	c9 01       	movw	r24, r18
    2186:	88 0f       	add	r24, r24
    2188:	99 1f       	adc	r25, r25
    218a:	82 0f       	add	r24, r18
    218c:	93 1f       	adc	r25, r19
    218e:	fc 01       	movw	r30, r24
    2190:	ef 58       	subi	r30, 0x8F	; 143
    2192:	fe 4f       	sbci	r31, 0xFE	; 254
    2194:	40 81       	ld	r20, Z
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	28 2f       	mov	r18, r24
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	c9 01       	movw	r24, r18
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	82 0f       	add	r24, r18
    21a4:	93 1f       	adc	r25, r19
    21a6:	fc 01       	movw	r30, r24
    21a8:	ee 58       	subi	r30, 0x8E	; 142
    21aa:	fe 4f       	sbci	r31, 0xFE	; 254
    21ac:	90 81       	ld	r25, Z
    21ae:	84 2f       	mov	r24, r20
    21b0:	69 2f       	mov	r22, r25
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <DIO_enuSetPinValue>
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	05 c0       	rjmp	.+10     	; 0x21c6 <LED_ON+0xd4>
			}
			else{
				Local_enuErrorStates = ES_OUT_OF_RANGE;
    21bc:	83 e0       	ldi	r24, 0x03	; 3
    21be:	89 83       	std	Y+1, r24	; 0x01
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <LED_ON+0xd4>
			}
		}
		else{
			Local_enuErrorStates = ES_OUT_OF_RANGE;
    21c2:	83 e0       	ldi	r24, 0x03	; 3
    21c4:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorStates;
    21c6:	89 81       	ldd	r24, Y+1	; 0x01

}
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <LED_OFF>:
ES_t LED_OFF(u8 CopypAstrLEDinfo){
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <LED_OFF+0x6>
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorStates = ES_NOK;
    21de:	19 82       	std	Y+1, r1	; 0x01
		if(CopypAstrLEDinfo < LED_NUM){
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	86 30       	cpi	r24, 0x06	; 6
    21e4:	08 f0       	brcs	.+2      	; 0x21e8 <LED_OFF+0x16>
    21e6:	5d c0       	rjmp	.+186    	; 0x22a2 <LED_OFF+0xd0>
			if(LED_AstrLEDconfig[CopypAstrLEDinfo].LED_connection == PULL_DOWN){
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	28 2f       	mov	r18, r24
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	c9 01       	movw	r24, r18
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	82 0f       	add	r24, r18
    21f6:	93 1f       	adc	r25, r19
    21f8:	fc 01       	movw	r30, r24
    21fa:	ed 58       	subi	r30, 0x8D	; 141
    21fc:	fe 4f       	sbci	r31, 0xFE	; 254
    21fe:	80 81       	ld	r24, Z
    2200:	88 23       	and	r24, r24
    2202:	f9 f4       	brne	.+62     	; 0x2242 <LED_OFF+0x70>
				Local_enuErrorStates = DIO_enuSetPinValue(LED_AstrLEDconfig[CopypAstrLEDinfo].LED_port, LED_AstrLEDconfig[CopypAstrLEDinfo].LED_pin, DIO_u8HIGH);
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	c9 01       	movw	r24, r18
    220c:	88 0f       	add	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	82 0f       	add	r24, r18
    2212:	93 1f       	adc	r25, r19
    2214:	fc 01       	movw	r30, r24
    2216:	ef 58       	subi	r30, 0x8F	; 143
    2218:	fe 4f       	sbci	r31, 0xFE	; 254
    221a:	40 81       	ld	r20, Z
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	28 2f       	mov	r18, r24
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	c9 01       	movw	r24, r18
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	82 0f       	add	r24, r18
    222a:	93 1f       	adc	r25, r19
    222c:	fc 01       	movw	r30, r24
    222e:	ee 58       	subi	r30, 0x8E	; 142
    2230:	fe 4f       	sbci	r31, 0xFE	; 254
    2232:	90 81       	ld	r25, Z
    2234:	84 2f       	mov	r24, r20
    2236:	69 2f       	mov	r22, r25
    2238:	41 e0       	ldi	r20, 0x01	; 1
    223a:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <DIO_enuSetPinValue>
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	32 c0       	rjmp	.+100    	; 0x22a6 <LED_OFF+0xd4>
			}
			else if(LED_AstrLEDconfig[CopypAstrLEDinfo].LED_connection == PULL_UP){
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	28 2f       	mov	r18, r24
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	c9 01       	movw	r24, r18
    224a:	88 0f       	add	r24, r24
    224c:	99 1f       	adc	r25, r25
    224e:	82 0f       	add	r24, r18
    2250:	93 1f       	adc	r25, r19
    2252:	fc 01       	movw	r30, r24
    2254:	ed 58       	subi	r30, 0x8D	; 141
    2256:	fe 4f       	sbci	r31, 0xFE	; 254
    2258:	80 81       	ld	r24, Z
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	f9 f4       	brne	.+62     	; 0x229c <LED_OFF+0xca>
				Local_enuErrorStates = DIO_enuSetPinValue(LED_AstrLEDconfig[CopypAstrLEDinfo].LED_port, LED_AstrLEDconfig[CopypAstrLEDinfo].LED_pin, DIO_u8LOW);
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	c9 01       	movw	r24, r18
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	82 0f       	add	r24, r18
    226c:	93 1f       	adc	r25, r19
    226e:	fc 01       	movw	r30, r24
    2270:	ef 58       	subi	r30, 0x8F	; 143
    2272:	fe 4f       	sbci	r31, 0xFE	; 254
    2274:	40 81       	ld	r20, Z
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	28 2f       	mov	r18, r24
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	c9 01       	movw	r24, r18
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	82 0f       	add	r24, r18
    2284:	93 1f       	adc	r25, r19
    2286:	fc 01       	movw	r30, r24
    2288:	ee 58       	subi	r30, 0x8E	; 142
    228a:	fe 4f       	sbci	r31, 0xFE	; 254
    228c:	90 81       	ld	r25, Z
    228e:	84 2f       	mov	r24, r20
    2290:	69 2f       	mov	r22, r25
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <DIO_enuSetPinValue>
    2298:	89 83       	std	Y+1, r24	; 0x01
    229a:	05 c0       	rjmp	.+10     	; 0x22a6 <LED_OFF+0xd4>
			}
			else{
				Local_enuErrorStates = ES_OUT_OF_RANGE;
    229c:	83 e0       	ldi	r24, 0x03	; 3
    229e:	89 83       	std	Y+1, r24	; 0x01
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <LED_OFF+0xd4>
			}
		}
		else{
			Local_enuErrorStates = ES_OUT_OF_RANGE;
    22a2:	83 e0       	ldi	r24, 0x03	; 3
    22a4:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorStates;
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	cf 91       	pop	r28
    22ae:	df 91       	pop	r29
    22b0:	08 95       	ret

000022b2 <LED_toggel>:
ES_t LED_toggel(u8 CopypAstrLEDinfo){
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <LED_toggel+0x6>
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    22be:	19 82       	std	Y+1, r1	; 0x01

		if(CopypAstrLEDinfo < LED_NUM){
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	86 30       	cpi	r24, 0x06	; 6
    22c4:	e8 f4       	brcc	.+58     	; 0x2300 <LED_toggel+0x4e>
			DIO_enuTogPinValue(LED_AstrLEDconfig[CopypAstrLEDinfo].LED_port, LED_AstrLEDconfig[CopypAstrLEDinfo].LED_pin);
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	28 2f       	mov	r18, r24
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	c9 01       	movw	r24, r18
    22ce:	88 0f       	add	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	82 0f       	add	r24, r18
    22d4:	93 1f       	adc	r25, r19
    22d6:	fc 01       	movw	r30, r24
    22d8:	ef 58       	subi	r30, 0x8F	; 143
    22da:	fe 4f       	sbci	r31, 0xFE	; 254
    22dc:	40 81       	ld	r20, Z
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	c9 01       	movw	r24, r18
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	82 0f       	add	r24, r18
    22ec:	93 1f       	adc	r25, r19
    22ee:	fc 01       	movw	r30, r24
    22f0:	ee 58       	subi	r30, 0x8E	; 142
    22f2:	fe 4f       	sbci	r31, 0xFE	; 254
    22f4:	90 81       	ld	r25, Z
    22f6:	84 2f       	mov	r24, r20
    22f8:	69 2f       	mov	r22, r25
    22fa:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_enuTogPinValue>
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <LED_toggel+0x52>
		}
		else{
			Local_enuErrorStates = ES_OUT_OF_RANGE;
    2300:	83 e0       	ldi	r24, 0x03	; 3
    2302:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorStates;
    2304:	89 81       	ldd	r24, Y+1	; 0x01


}
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	08 95       	ret

00002310 <pedstrainMode>:


u8 flag_yledCar = 0, flag_RledCar = 0, flag_GledCar = 1;

static void pedstrainMode(void)
{
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
	 * Local function (only use in this file)
	 * this function estimate pedestrian wanted to cross road in the time of crossing car
	 * he will press the  button to change traffic light..firing interrupt
	 * this function will pass to ISR
	 */
	if (flag_RledCar == FLAG_HIGH){
    2318:	80 91 9c 01 	lds	r24, 0x019C
    231c:	81 30       	cpi	r24, 0x01	; 1
    231e:	39 f5       	brne	.+78     	; 0x236e <pedstrainMode+0x5e>
		/*check if pedestrian press the button when the red led of car is on
		 *
		 */

		LED_ON(CAR_RLED);
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	0e 94 79 10 	call	0x20f2	; 0x20f2 <LED_ON>
		LED_ON(PEDESTRAIN_GLED);
    2326:	85 e0       	ldi	r24, 0x05	; 5
    2328:	0e 94 79 10 	call	0x20f2	; 0x20f2 <LED_ON>
		TIMER0_enuSetSyncDelay(5000);
    232c:	88 e8       	ldi	r24, 0x88	; 136
    232e:	93 e1       	ldi	r25, 0x13	; 19
    2330:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <TIMER0_enuSetSyncDelay>

		LED_OFF(CAR_RLED);
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
		LED_OFF(PEDESTRAIN_GLED);
    233a:	85 e0       	ldi	r24, 0x05	; 5
    233c:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
		toggle_YLED();
    2340:	0e 94 74 12 	call	0x24e8	; 0x24e8 <toggle_YLED>


		LED_ON(PEDESTRAIN_RLED);
    2344:	83 e0       	ldi	r24, 0x03	; 3
    2346:	0e 94 79 10 	call	0x20f2	; 0x20f2 <LED_ON>
		LED_ON(CAR_GLED);
    234a:	82 e0       	ldi	r24, 0x02	; 2
    234c:	0e 94 79 10 	call	0x20f2	; 0x20f2 <LED_ON>
		TIMER0_enuSetSyncDelay(5000);
    2350:	88 e8       	ldi	r24, 0x88	; 136
    2352:	93 e1       	ldi	r25, 0x13	; 19
    2354:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <TIMER0_enuSetSyncDelay>

		LED_OFF(CAR_GLED);
    2358:	82 e0       	ldi	r24, 0x02	; 2
    235a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
		LED_OFF(PEDESTRAIN_RLED);
    235e:	83 e0       	ldi	r24, 0x03	; 3
    2360:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
		TIMER0_enuSetSyncDelay(5000);
    2364:	88 e8       	ldi	r24, 0x88	; 136
    2366:	93 e1       	ldi	r25, 0x13	; 19
    2368:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <TIMER0_enuSetSyncDelay>
    236c:	59 c0       	rjmp	.+178    	; 0x2420 <pedstrainMode+0x110>
	}
	else if (flag_yledCar== FLAG_HIGH){
    236e:	80 91 9b 01 	lds	r24, 0x019B
    2372:	81 30       	cpi	r24, 0x01	; 1
    2374:	69 f5       	brne	.+90     	; 0x23d0 <pedstrainMode+0xc0>
		/*check if pedestrian press the button when the yellow led blanking
				 *
				 */
		toggle_YLED();
    2376:	0e 94 74 12 	call	0x24e8	; 0x24e8 <toggle_YLED>

		LED_OFF(PEDESTRAIN_RLED);
    237a:	83 e0       	ldi	r24, 0x03	; 3
    237c:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
		LED_OFF(CAR_GLED);
    2380:	82 e0       	ldi	r24, 0x02	; 2
    2382:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
		LED_ON(CAR_RLED);
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	0e 94 79 10 	call	0x20f2	; 0x20f2 <LED_ON>
		LED_ON(PEDESTRAIN_GLED);
    238c:	85 e0       	ldi	r24, 0x05	; 5
    238e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <LED_ON>
		TIMER0_enuSetSyncDelay(5000);
    2392:	88 e8       	ldi	r24, 0x88	; 136
    2394:	93 e1       	ldi	r25, 0x13	; 19
    2396:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <TIMER0_enuSetSyncDelay>

		LED_OFF(CAR_RLED);
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
		LED_OFF(PEDESTRAIN_GLED);//ex
    23a0:	85 e0       	ldi	r24, 0x05	; 5
    23a2:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
		toggle_YLED();
    23a6:	0e 94 74 12 	call	0x24e8	; 0x24e8 <toggle_YLED>

		LED_ON(CAR_GLED);
    23aa:	82 e0       	ldi	r24, 0x02	; 2
    23ac:	0e 94 79 10 	call	0x20f2	; 0x20f2 <LED_ON>
		LED_ON(PEDESTRAIN_RLED);
    23b0:	83 e0       	ldi	r24, 0x03	; 3
    23b2:	0e 94 79 10 	call	0x20f2	; 0x20f2 <LED_ON>
		TIMER0_enuSetSyncDelay(5000);
    23b6:	88 e8       	ldi	r24, 0x88	; 136
    23b8:	93 e1       	ldi	r25, 0x13	; 19
    23ba:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <TIMER0_enuSetSyncDelay>

		LED_OFF(PEDESTRAIN_GLED);
    23be:	85 e0       	ldi	r24, 0x05	; 5
    23c0:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
		LED_OFF(CAR_RLED);
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
		toggle_YLED();
    23ca:	0e 94 74 12 	call	0x24e8	; 0x24e8 <toggle_YLED>
    23ce:	28 c0       	rjmp	.+80     	; 0x2420 <pedstrainMode+0x110>


	}
	else if (flag_GledCar== FLAG_HIGH) {
    23d0:	80 91 83 01 	lds	r24, 0x0183
    23d4:	81 30       	cpi	r24, 0x01	; 1
    23d6:	21 f5       	brne	.+72     	; 0x2420 <pedstrainMode+0x110>
		//check if pedestrian press the button when the green led of car is on

		toggle_YLED();
    23d8:	0e 94 74 12 	call	0x24e8	; 0x24e8 <toggle_YLED>

		LED_OFF(CAR_GLED);
    23dc:	82 e0       	ldi	r24, 0x02	; 2
    23de:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
		LED_OFF(PEDESTRAIN_RLED);
    23e2:	83 e0       	ldi	r24, 0x03	; 3
    23e4:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
		LED_ON(CAR_RLED);
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	0e 94 79 10 	call	0x20f2	; 0x20f2 <LED_ON>
		LED_ON(PEDESTRAIN_GLED);
    23ee:	85 e0       	ldi	r24, 0x05	; 5
    23f0:	0e 94 79 10 	call	0x20f2	; 0x20f2 <LED_ON>
		TIMER0_enuSetSyncDelay(5000);
    23f4:	88 e8       	ldi	r24, 0x88	; 136
    23f6:	93 e1       	ldi	r25, 0x13	; 19
    23f8:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <TIMER0_enuSetSyncDelay>

		LED_OFF(CAR_RLED);
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
		LED_OFF(PEDESTRAIN_GLED);
    2402:	85 e0       	ldi	r24, 0x05	; 5
    2404:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
		toggle_YLED();
    2408:	0e 94 74 12 	call	0x24e8	; 0x24e8 <toggle_YLED>

		LED_ON(CAR_GLED);
    240c:	82 e0       	ldi	r24, 0x02	; 2
    240e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <LED_ON>
		LED_ON(PEDESTRAIN_RLED);
    2412:	83 e0       	ldi	r24, 0x03	; 3
    2414:	0e 94 79 10 	call	0x20f2	; 0x20f2 <LED_ON>
		TIMER0_enuSetSyncDelay(5000);
    2418:	88 e8       	ldi	r24, 0x88	; 136
    241a:	93 e1       	ldi	r25, 0x13	; 19
    241c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <TIMER0_enuSetSyncDelay>



	}

}
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	08 95       	ret

00002426 <APP_init>:


ES_t APP_init(){
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	00 d0       	rcall	.+0      	; 0x242c <APP_init+0x6>
    242c:	0f 92       	push	r0
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62


	ES_t Local_enuerrorState =ES_NOK;
    2432:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16errorState;
	Local_u16errorState= LED_init();
    2434:	0e 94 47 10 	call	0x208e	; 0x208e <LED_init>
    2438:	88 2f       	mov	r24, r24
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	9a 83       	std	Y+2, r25	; 0x02
    243e:	89 83       	std	Y+1, r24	; 0x01
	Local_u16errorState=(Switch_enuInit()<<2);
    2440:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <Switch_enuInit>
    2444:	88 2f       	mov	r24, r24
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	88 0f       	add	r24, r24
    244a:	99 1f       	adc	r25, r25
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	9a 83       	std	Y+2, r25	; 0x02
    2452:	89 83       	std	Y+1, r24	; 0x01
	Local_u16errorState=(TIMER0_enuInit()<<2);
    2454:	0e 94 17 07 	call	0xe2e	; 0xe2e <TIMER0_enuInit>
    2458:	88 0f       	add	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	88 0f       	add	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	9a 83       	std	Y+2, r25	; 0x02
    2462:	89 83       	std	Y+1, r24	; 0x01
	Local_u16errorState=(EXTI_enuInit()<<2);
    2464:	0e 94 85 09 	call	0x130a	; 0x130a <EXTI_enuInit>
    2468:	88 0f       	add	r24, r24
    246a:	99 1f       	adc	r25, r25
    246c:	88 0f       	add	r24, r24
    246e:	99 1f       	adc	r25, r25
    2470:	9a 83       	std	Y+2, r25	; 0x02
    2472:	89 83       	std	Y+1, r24	; 0x01
	SETBIT(GIFR,0);
    2474:	aa e5       	ldi	r26, 0x5A	; 90
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	ea e5       	ldi	r30, 0x5A	; 90
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	81 60       	ori	r24, 0x01	; 1
    2480:	8c 93       	st	X, r24
	Local_u16errorState=(GIE_enuInit()<<2);
    2482:	0e 94 49 09 	call	0x1292	; 0x1292 <GIE_enuInit>
    2486:	88 0f       	add	r24, r24
    2488:	99 1f       	adc	r25, r25
    248a:	88 0f       	add	r24, r24
    248c:	99 1f       	adc	r25, r25
    248e:	9a 83       	std	Y+2, r25	; 0x02
    2490:	89 83       	std	Y+1, r24	; 0x01
	Local_u16errorState =(GIE_enuEnable()<<2);
    2492:	0e 94 5d 09 	call	0x12ba	; 0x12ba <GIE_enuEnable>
    2496:	88 0f       	add	r24, r24
    2498:	99 1f       	adc	r25, r25
    249a:	88 0f       	add	r24, r24
    249c:	99 1f       	adc	r25, r25
    249e:	9a 83       	std	Y+2, r25	; 0x02
    24a0:	89 83       	std	Y+1, r24	; 0x01
	if (Local_u16errorState == 0x555){ // check if all function return 01 that is mean its ok.
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	9a 81       	ldd	r25, Y+2	; 0x02
    24a6:	25 e0       	ldi	r18, 0x05	; 5
    24a8:	85 35       	cpi	r24, 0x55	; 85
    24aa:	92 07       	cpc	r25, r18
    24ac:	11 f4       	brne	.+4      	; 0x24b2 <APP_init+0x8c>
		Local_enuerrorState = ES_OK;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_enuerrorState;
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <APP_Start>:



ES_t APP_Start(){
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	0f 92       	push	r0
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuerrorState =ES_NOK;
    24ca:	19 82       	std	Y+1, r1	; 0x01
	Local_enuerrorState = EXTI_enuCallBack(&pedstrainMode,0);
    24cc:	88 e8       	ldi	r24, 0x88	; 136
    24ce:	91 e1       	ldi	r25, 0x11	; 17
    24d0:	60 e0       	ldi	r22, 0x00	; 0
    24d2:	70 e0       	ldi	r23, 0x00	; 0
    24d4:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <EXTI_enuCallBack>
    24d8:	89 83       	std	Y+1, r24	; 0x01

		NormalMode();
    24da:	0e 94 9a 12 	call	0x2534	; 0x2534 <NormalMode>

	return Local_enuerrorState;
    24de:	89 81       	ldd	r24, Y+1	; 0x01
}
    24e0:	0f 90       	pop	r0
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <toggle_YLED>:
 void toggle_YLED(){
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	0f 92       	push	r0
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
	 /*
	  * first we rising flag of yellow led to tell system if pedestrian press the button when yellow led blank in the end of
	  * blanking down flag again
	  * this function blank yellow led for 5sec
	  */
	 flag_yledCar = FLAG_HIGH;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	80 93 9b 01 	sts	0x019B, r24
	u8 Local_u8Itrator;

	for (Local_u8Itrator=0;Local_u8Itrator<20;Local_u8Itrator++){
    24f8:	19 82       	std	Y+1, r1	; 0x01
    24fa:	0d c0       	rjmp	.+26     	; 0x2516 <toggle_YLED+0x2e>
		LED_toggel(PEDESTRAIN_YLED);
    24fc:	84 e0       	ldi	r24, 0x04	; 4
    24fe:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LED_toggel>
		LED_toggel(CAR_YLED);
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LED_toggel>
		TIMER0_enuSetSyncDelay(250);
    2508:	8a ef       	ldi	r24, 0xFA	; 250
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <TIMER0_enuSetSyncDelay>
	  * this function blank yellow led for 5sec
	  */
	 flag_yledCar = FLAG_HIGH;
	u8 Local_u8Itrator;

	for (Local_u8Itrator=0;Local_u8Itrator<20;Local_u8Itrator++){
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	8f 5f       	subi	r24, 0xFF	; 255
    2514:	89 83       	std	Y+1, r24	; 0x01
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	84 31       	cpi	r24, 0x14	; 20
    251a:	80 f3       	brcs	.-32     	; 0x24fc <toggle_YLED+0x14>
		LED_toggel(PEDESTRAIN_YLED);
		LED_toggel(CAR_YLED);
		TIMER0_enuSetSyncDelay(250);
	}
	LED_OFF(PEDESTRAIN_YLED);
    251c:	84 e0       	ldi	r24, 0x04	; 4
    251e:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
	LED_OFF(CAR_YLED);
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
	flag_yledCar = FLAG_LOW;
    2528:	10 92 9b 01 	sts	0x019B, r1

}
    252c:	0f 90       	pop	r0
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <NormalMode>:
/**************************************************************************************************************************/
void NormalMode(){
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
	//this function estimate Normal mode of traffic light if no external interrupt happened
	//first IN normal mode turn on Green led to let car pass,rising Flag of Car Green Led and turn off Red led of pedestrain
	LED_ON(CAR_GLED);
    253c:	82 e0       	ldi	r24, 0x02	; 2
    253e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <LED_ON>
	flag_GledCar = FLAG_HIGH;
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	80 93 83 01 	sts	0x0183, r24
	LED_ON(PEDESTRAIN_RLED);
    2548:	83 e0       	ldi	r24, 0x03	; 3
    254a:	0e 94 79 10 	call	0x20f2	; 0x20f2 <LED_ON>
	TIMER0_enuSetSyncDelay(5000); //delay 5 SEC
    254e:	88 e8       	ldi	r24, 0x88	; 136
    2550:	93 e1       	ldi	r25, 0x13	; 19
    2552:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <TIMER0_enuSetSyncDelay>
//then turn off Car an the same time down flag and turn off Pedestrain RLED then blinking both yellow Led of Car and pedestrian for 5SEC
	LED_OFF(CAR_GLED);
    2556:	82 e0       	ldi	r24, 0x02	; 2
    2558:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
	flag_GledCar = FLAG_LOW;
    255c:	10 92 83 01 	sts	0x0183, r1
	LED_OFF(PEDESTRAIN_RLED);
    2560:	83 e0       	ldi	r24, 0x03	; 3
    2562:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
	toggle_YLED();
    2566:	0e 94 74 12 	call	0x24e8	; 0x24e8 <toggle_YLED>
//her we let pedestrian cross road by turn on Green led for him and turn of red led for car and rising red led flag  for 5sec
	//then blink yellow leds for 5 sec
	LED_ON(CAR_RLED);
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	0e 94 79 10 	call	0x20f2	; 0x20f2 <LED_ON>
	flag_RledCar = FLAG_HIGH;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	80 93 9c 01 	sts	0x019C, r24
	LED_ON(PEDESTRAIN_GLED);
    2576:	85 e0       	ldi	r24, 0x05	; 5
    2578:	0e 94 79 10 	call	0x20f2	; 0x20f2 <LED_ON>
	TIMER0_enuSetSyncDelay(5000);
    257c:	88 e8       	ldi	r24, 0x88	; 136
    257e:	93 e1       	ldi	r25, 0x13	; 19
    2580:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <TIMER0_enuSetSyncDelay>
	LED_OFF(CAR_RLED);
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
	flag_RledCar = FLAG_LOW;
    258a:	10 92 9c 01 	sts	0x019C, r1
	LED_OFF(PEDESTRAIN_GLED);
    258e:	85 e0       	ldi	r24, 0x05	; 5
    2590:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LED_OFF>
	toggle_YLED();
    2594:	0e 94 74 12 	call	0x24e8	; 0x24e8 <toggle_YLED>
}
    2598:	cf 91       	pop	r28
    259a:	df 91       	pop	r29
    259c:	08 95       	ret

0000259e <main>:



#include "Application.h"

int main(){
    259e:	df 93       	push	r29
    25a0:	cf 93       	push	r28
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
	APP_init();
    25a6:	0e 94 13 12 	call	0x2426	; 0x2426 <APP_init>


	while (1){

		APP_Start();
    25aa:	0e 94 60 12 	call	0x24c0	; 0x24c0 <APP_Start>
    25ae:	fd cf       	rjmp	.-6      	; 0x25aa <main+0xc>

000025b0 <__prologue_saves__>:
    25b0:	2f 92       	push	r2
    25b2:	3f 92       	push	r3
    25b4:	4f 92       	push	r4
    25b6:	5f 92       	push	r5
    25b8:	6f 92       	push	r6
    25ba:	7f 92       	push	r7
    25bc:	8f 92       	push	r8
    25be:	9f 92       	push	r9
    25c0:	af 92       	push	r10
    25c2:	bf 92       	push	r11
    25c4:	cf 92       	push	r12
    25c6:	df 92       	push	r13
    25c8:	ef 92       	push	r14
    25ca:	ff 92       	push	r15
    25cc:	0f 93       	push	r16
    25ce:	1f 93       	push	r17
    25d0:	cf 93       	push	r28
    25d2:	df 93       	push	r29
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    25d8:	ca 1b       	sub	r28, r26
    25da:	db 0b       	sbc	r29, r27
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	09 94       	ijmp

000025e8 <__epilogue_restores__>:
    25e8:	2a 88       	ldd	r2, Y+18	; 0x12
    25ea:	39 88       	ldd	r3, Y+17	; 0x11
    25ec:	48 88       	ldd	r4, Y+16	; 0x10
    25ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    25f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    25f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    25f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    25f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    25f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    25fa:	b9 84       	ldd	r11, Y+9	; 0x09
    25fc:	c8 84       	ldd	r12, Y+8	; 0x08
    25fe:	df 80       	ldd	r13, Y+7	; 0x07
    2600:	ee 80       	ldd	r14, Y+6	; 0x06
    2602:	fd 80       	ldd	r15, Y+5	; 0x05
    2604:	0c 81       	ldd	r16, Y+4	; 0x04
    2606:	1b 81       	ldd	r17, Y+3	; 0x03
    2608:	aa 81       	ldd	r26, Y+2	; 0x02
    260a:	b9 81       	ldd	r27, Y+1	; 0x01
    260c:	ce 0f       	add	r28, r30
    260e:	d1 1d       	adc	r29, r1
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	de bf       	out	0x3e, r29	; 62
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	cd bf       	out	0x3d, r28	; 61
    261a:	ed 01       	movw	r28, r26
    261c:	08 95       	ret

0000261e <_exit>:
    261e:	f8 94       	cli

00002620 <__stop_program>:
    2620:	ff cf       	rjmp	.-2      	; 0x2620 <__stop_program>
